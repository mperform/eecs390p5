Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> Declarations
Rule 2     Declarations -> Declarations Declaration
Rule 3     Declarations -> empty
Rule 4     Declaration -> FunctionDecl
Rule 5     Declaration -> StructDecl
Rule 6     StructDecl -> STRUCT Name LPAREN VarDeclsOpt RPAREN SEMI
Rule 7     VarDeclsOpt -> VarDecls
Rule 8     VarDeclsOpt -> empty
Rule 9     VarDecls -> VarDecl
Rule 10    VarDecls -> VarDecls COMMA VarDecl
Rule 11    VarDecl -> Type Name
Rule 12    Type -> Name
Rule 13    Type -> Type LBRACKET RBRACKET
Rule 14    Name -> IDENT
Rule 15    ParametersOpt -> Parameters
Rule 16    ParametersOpt -> empty
Rule 17    Parameters -> Parameter
Rule 18    Parameters -> Parameters COMMA Parameter
Rule 19    Parameter -> Type Name
Rule 20    FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block
Rule 21    Block -> LBRACE StatementsOpt RBRACE
Rule 22    StatementsOpt -> Statements
Rule 23    StatementsOpt -> empty
Rule 24    Statements -> Statement
Rule 25    Statements -> Statements Statement
Rule 26    Statement -> IfStatement
Rule 27    Statement -> WhileStatement
Rule 28    Statement -> ForStatement
Rule 29    Statement -> BreakStatement
Rule 30    Statement -> ContinueStatement
Rule 31    Statement -> ReturnStatement
Rule 32    Statement -> ExpressionStatement
Rule 33    IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt
Rule 34    ElseOpt -> ELSE Block
Rule 35    ElseOpt -> ELSE IfStatement
Rule 36    ElseOpt -> empty
Rule 37    WhileStatement -> WHILE LPAREN Expression RPAREN Block
Rule 38    ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block
Rule 39    BreakStatement -> BREAK SEMI
Rule 40    ContinueStatement -> CONTINUE SEMI
Rule 41    ReturnStatement -> RETURN Expression SEMI
Rule 42    ReturnStatement -> RETURN SEMI
Rule 43    ExpressionStatement -> Expression SEMI
Rule 44    Expression -> Literal
Rule 45    Expression -> NameExpression
Rule 46    Expression -> ParenthesizedExpression
Rule 47    Expression -> CallExpression
Rule 48    Expression -> NewExpression
Rule 49    Expression -> FieldAccessExpression
Rule 50    Expression -> ArrayIndexExpression
Rule 51    Expression -> UnaryPrefixOperation
Rule 52    Expression -> BinaryOperation
Rule 53    ExpressionOpt -> Expression
Rule 54    ExpressionOpt -> empty
Rule 55    Literal -> IntegerLiteral
Rule 56    Literal -> FloatLiteral
Rule 57    Literal -> StringLiteral
Rule 58    Literal -> BooleanLiteral
Rule 59    Literal -> NullLiteral
Rule 60    IntegerLiteral -> INTEGER
Rule 61    FloatLiteral -> FLOAT
Rule 62    StringLiteral -> STRING
Rule 63    BooleanLiteral -> TRUE
Rule 64    BooleanLiteral -> FALSE
Rule 65    NullLiteral -> NULL
Rule 66    NameExpression -> Name
Rule 67    ParenthesizedExpression -> LPAREN Expression RPAREN
Rule 68    CallExpression -> Name LPAREN ArgumentsOpt RPAREN
Rule 69    ArgumentsOpt -> Arguments
Rule 70    ArgumentsOpt -> empty
Rule 71    Arguments -> Expression
Rule 72    Arguments -> Arguments COMMA Expression
Rule 73    NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN
Rule 74    NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE
Rule 75    FieldAccessExpression -> Expression PERIOD Name
Rule 76    ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET
Rule 77    UnaryPrefixOperation -> PLUS Expression
Rule 78    UnaryPrefixOperation -> MINUS Expression
Rule 79    UnaryPrefixOperation -> LNOT Expression
Rule 80    UnaryPrefixOperation -> INCREMENT Expression
Rule 81    UnaryPrefixOperation -> DECREMENT Expression
Rule 82    UnaryPrefixOperation -> ID Expression
Rule 83    BinaryOperation -> Expression PLUS Expression
Rule 84    BinaryOperation -> Expression MINUS Expression
Rule 85    BinaryOperation -> Expression TIMES Expression
Rule 86    BinaryOperation -> Expression DIVIDE Expression
Rule 87    BinaryOperation -> Expression MODULO Expression
Rule 88    BinaryOperation -> Expression LOR Expression
Rule 89    BinaryOperation -> Expression LAND Expression
Rule 90    BinaryOperation -> Expression LT Expression
Rule 91    BinaryOperation -> Expression LE Expression
Rule 92    BinaryOperation -> Expression GT Expression
Rule 93    BinaryOperation -> Expression GE Expression
Rule 94    BinaryOperation -> Expression EQ Expression
Rule 95    BinaryOperation -> Expression NE Expression
Rule 96    BinaryOperation -> Expression EQUALS Expression
Rule 97    BinaryOperation -> Expression PUSH Expression
Rule 98    BinaryOperation -> Expression POP Expression
Rule 99    empty -> <empty>

Terminals, with rules where they appear

BREAK                : 39
COMMA                : 10 18 72
CONTINUE             : 40
DECREMENT            : 81
DIVIDE               : 86
ELSE                 : 34 35
EQ                   : 94
EQUALS               : 96
FALSE                : 64
FLOAT                : 61
FOR                  : 38
GE                   : 93
GT                   : 92
ID                   : 82
IDENT                : 14
IF                   : 33
INCREMENT            : 80
INTEGER              : 60
LAND                 : 89
LBRACE               : 21 74
LBRACKET             : 13 76
LE                   : 91
LNOT                 : 79
LOR                  : 88
LPAREN               : 6 20 20 33 37 38 67 68 73
LT                   : 90
MINUS                : 78 84
MODULO               : 87
NE                   : 95
NEW                  : 73 74
NULL                 : 65
PERIOD               : 75
PLUS                 : 77 83
POP                  : 98
PUSH                 : 97
RBRACE               : 21 74
RBRACKET             : 13 76
RETURN               : 41 42
RPAREN               : 6 20 20 33 37 38 67 68 73
SEMI                 : 6 38 38 39 40 41 42 43
STRING               : 62
STRUCT               : 6
TIMES                : 85
TRUE                 : 63
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

Arguments            : 69 72
ArgumentsOpt         : 68 73 74
ArrayIndexExpression : 50
BinaryOperation      : 52
Block                : 20 33 34 37 38
BooleanLiteral       : 58
BreakStatement       : 29
CallExpression       : 47
ContinueStatement    : 30
Declaration          : 2
Declarations         : 1 2
ElseOpt              : 33
Expression           : 33 37 41 43 53 67 71 72 75 76 76 77 78 79 80 81 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98
ExpressionOpt        : 38 38 38
ExpressionStatement  : 32
FieldAccessExpression : 49
FloatLiteral         : 56
ForStatement         : 28
FunctionDecl         : 4
IfStatement          : 26 35
IntegerLiteral       : 55
Literal              : 44
Name                 : 6 11 12 19 20 66 68 75
NameExpression       : 45
NewExpression        : 48
NullLiteral          : 59
Parameter            : 17 18
Parameters           : 15 18
ParametersOpt        : 20
ParenthesizedExpression : 46
Program              : 0
ReturnStatement      : 31
Statement            : 24 25
Statements           : 22 25
StatementsOpt        : 21
StringLiteral        : 57
StructDecl           : 5
Type                 : 11 13 19 20 73 74
UnaryPrefixOperation : 51
VarDecl              : 9 10
VarDecls             : 7 10
VarDeclsOpt          : 6 20
WhileStatement       : 27
empty                : 3 8 16 23 36 54 70

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . Declarations
    (2) Declarations -> . Declarations Declaration
    (3) Declarations -> . empty
    (99) empty -> .

    STRUCT          reduce using rule 99 (empty -> .)
    IDENT           reduce using rule 99 (empty -> .)
    $end            reduce using rule 99 (empty -> .)

    Program                        shift and go to state 1
    Declarations                   shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> Program .



state 2

    (1) Program -> Declarations .
    (2) Declarations -> Declarations . Declaration
    (4) Declaration -> . FunctionDecl
    (5) Declaration -> . StructDecl
    (20) FunctionDecl -> . Type Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block
    (6) StructDecl -> . STRUCT Name LPAREN VarDeclsOpt RPAREN SEMI
    (12) Type -> . Name
    (13) Type -> . Type LBRACKET RBRACKET
    (14) Name -> . IDENT

    $end            reduce using rule 1 (Program -> Declarations .)
    STRUCT          shift and go to state 9
    IDENT           shift and go to state 10

    Declaration                    shift and go to state 4
    FunctionDecl                   shift and go to state 5
    StructDecl                     shift and go to state 6
    Type                           shift and go to state 7
    Name                           shift and go to state 8

state 3

    (3) Declarations -> empty .

    STRUCT          reduce using rule 3 (Declarations -> empty .)
    IDENT           reduce using rule 3 (Declarations -> empty .)
    $end            reduce using rule 3 (Declarations -> empty .)


state 4

    (2) Declarations -> Declarations Declaration .

    STRUCT          reduce using rule 2 (Declarations -> Declarations Declaration .)
    IDENT           reduce using rule 2 (Declarations -> Declarations Declaration .)
    $end            reduce using rule 2 (Declarations -> Declarations Declaration .)


state 5

    (4) Declaration -> FunctionDecl .

    STRUCT          reduce using rule 4 (Declaration -> FunctionDecl .)
    IDENT           reduce using rule 4 (Declaration -> FunctionDecl .)
    $end            reduce using rule 4 (Declaration -> FunctionDecl .)


state 6

    (5) Declaration -> StructDecl .

    STRUCT          reduce using rule 5 (Declaration -> StructDecl .)
    IDENT           reduce using rule 5 (Declaration -> StructDecl .)
    $end            reduce using rule 5 (Declaration -> StructDecl .)


state 7

    (20) FunctionDecl -> Type . Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block
    (13) Type -> Type . LBRACKET RBRACKET
    (14) Name -> . IDENT

    LBRACKET        shift and go to state 12
    IDENT           shift and go to state 10

    Name                           shift and go to state 11

state 8

    (12) Type -> Name .

    LBRACKET        reduce using rule 12 (Type -> Name .)
    IDENT           reduce using rule 12 (Type -> Name .)
    LPAREN          reduce using rule 12 (Type -> Name .)
    LBRACE          reduce using rule 12 (Type -> Name .)


state 9

    (6) StructDecl -> STRUCT . Name LPAREN VarDeclsOpt RPAREN SEMI
    (14) Name -> . IDENT

    IDENT           shift and go to state 10

    Name                           shift and go to state 13

state 10

    (14) Name -> IDENT .

    LBRACKET        reduce using rule 14 (Name -> IDENT .)
    IDENT           reduce using rule 14 (Name -> IDENT .)
    LPAREN          reduce using rule 14 (Name -> IDENT .)
    COMMA           reduce using rule 14 (Name -> IDENT .)
    RPAREN          reduce using rule 14 (Name -> IDENT .)
    SEMI            reduce using rule 14 (Name -> IDENT .)
    PERIOD          reduce using rule 14 (Name -> IDENT .)
    PLUS            reduce using rule 14 (Name -> IDENT .)
    MINUS           reduce using rule 14 (Name -> IDENT .)
    TIMES           reduce using rule 14 (Name -> IDENT .)
    DIVIDE          reduce using rule 14 (Name -> IDENT .)
    MODULO          reduce using rule 14 (Name -> IDENT .)
    LOR             reduce using rule 14 (Name -> IDENT .)
    LAND            reduce using rule 14 (Name -> IDENT .)
    LT              reduce using rule 14 (Name -> IDENT .)
    LE              reduce using rule 14 (Name -> IDENT .)
    GT              reduce using rule 14 (Name -> IDENT .)
    GE              reduce using rule 14 (Name -> IDENT .)
    EQ              reduce using rule 14 (Name -> IDENT .)
    NE              reduce using rule 14 (Name -> IDENT .)
    EQUALS          reduce using rule 14 (Name -> IDENT .)
    PUSH            reduce using rule 14 (Name -> IDENT .)
    POP             reduce using rule 14 (Name -> IDENT .)
    LBRACE          reduce using rule 14 (Name -> IDENT .)
    RBRACKET        reduce using rule 14 (Name -> IDENT .)
    RBRACE          reduce using rule 14 (Name -> IDENT .)


state 11

    (20) FunctionDecl -> Type Name . LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block

    LPAREN          shift and go to state 14


state 12

    (13) Type -> Type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 15


state 13

    (6) StructDecl -> STRUCT Name . LPAREN VarDeclsOpt RPAREN SEMI

    LPAREN          shift and go to state 16


state 14

    (20) FunctionDecl -> Type Name LPAREN . ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block
    (15) ParametersOpt -> . Parameters
    (16) ParametersOpt -> . empty
    (17) Parameters -> . Parameter
    (18) Parameters -> . Parameters COMMA Parameter
    (99) empty -> .
    (19) Parameter -> . Type Name
    (12) Type -> . Name
    (13) Type -> . Type LBRACKET RBRACKET
    (14) Name -> . IDENT

    RPAREN          reduce using rule 99 (empty -> .)
    IDENT           shift and go to state 10

    Type                           shift and go to state 17
    Name                           shift and go to state 8
    ParametersOpt                  shift and go to state 18
    Parameters                     shift and go to state 19
    empty                          shift and go to state 20
    Parameter                      shift and go to state 21

state 15

    (13) Type -> Type LBRACKET RBRACKET .

    LBRACKET        reduce using rule 13 (Type -> Type LBRACKET RBRACKET .)
    IDENT           reduce using rule 13 (Type -> Type LBRACKET RBRACKET .)
    LPAREN          reduce using rule 13 (Type -> Type LBRACKET RBRACKET .)
    LBRACE          reduce using rule 13 (Type -> Type LBRACKET RBRACKET .)


state 16

    (6) StructDecl -> STRUCT Name LPAREN . VarDeclsOpt RPAREN SEMI
    (7) VarDeclsOpt -> . VarDecls
    (8) VarDeclsOpt -> . empty
    (9) VarDecls -> . VarDecl
    (10) VarDecls -> . VarDecls COMMA VarDecl
    (99) empty -> .
    (11) VarDecl -> . Type Name
    (12) Type -> . Name
    (13) Type -> . Type LBRACKET RBRACKET
    (14) Name -> . IDENT

    RPAREN          reduce using rule 99 (empty -> .)
    IDENT           shift and go to state 10

    Name                           shift and go to state 8
    VarDeclsOpt                    shift and go to state 22
    VarDecls                       shift and go to state 23
    empty                          shift and go to state 24
    VarDecl                        shift and go to state 25
    Type                           shift and go to state 26

state 17

    (19) Parameter -> Type . Name
    (13) Type -> Type . LBRACKET RBRACKET
    (14) Name -> . IDENT

    LBRACKET        shift and go to state 12
    IDENT           shift and go to state 10

    Name                           shift and go to state 27

state 18

    (20) FunctionDecl -> Type Name LPAREN ParametersOpt . RPAREN LPAREN VarDeclsOpt RPAREN Block

    RPAREN          shift and go to state 28


state 19

    (15) ParametersOpt -> Parameters .
    (18) Parameters -> Parameters . COMMA Parameter

    RPAREN          reduce using rule 15 (ParametersOpt -> Parameters .)
    COMMA           shift and go to state 29


state 20

    (16) ParametersOpt -> empty .

    RPAREN          reduce using rule 16 (ParametersOpt -> empty .)


state 21

    (17) Parameters -> Parameter .

    COMMA           reduce using rule 17 (Parameters -> Parameter .)
    RPAREN          reduce using rule 17 (Parameters -> Parameter .)


state 22

    (6) StructDecl -> STRUCT Name LPAREN VarDeclsOpt . RPAREN SEMI

    RPAREN          shift and go to state 30


state 23

    (7) VarDeclsOpt -> VarDecls .
    (10) VarDecls -> VarDecls . COMMA VarDecl

    RPAREN          reduce using rule 7 (VarDeclsOpt -> VarDecls .)
    COMMA           shift and go to state 31


state 24

    (8) VarDeclsOpt -> empty .

    RPAREN          reduce using rule 8 (VarDeclsOpt -> empty .)


state 25

    (9) VarDecls -> VarDecl .

    COMMA           reduce using rule 9 (VarDecls -> VarDecl .)
    RPAREN          reduce using rule 9 (VarDecls -> VarDecl .)


state 26

    (11) VarDecl -> Type . Name
    (13) Type -> Type . LBRACKET RBRACKET
    (14) Name -> . IDENT

    LBRACKET        shift and go to state 12
    IDENT           shift and go to state 10

    Name                           shift and go to state 32

state 27

    (19) Parameter -> Type Name .

    COMMA           reduce using rule 19 (Parameter -> Type Name .)
    RPAREN          reduce using rule 19 (Parameter -> Type Name .)


state 28

    (20) FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN . LPAREN VarDeclsOpt RPAREN Block

    LPAREN          shift and go to state 33


state 29

    (18) Parameters -> Parameters COMMA . Parameter
    (19) Parameter -> . Type Name
    (12) Type -> . Name
    (13) Type -> . Type LBRACKET RBRACKET
    (14) Name -> . IDENT

    IDENT           shift and go to state 10

    Parameter                      shift and go to state 34
    Type                           shift and go to state 17
    Name                           shift and go to state 8

state 30

    (6) StructDecl -> STRUCT Name LPAREN VarDeclsOpt RPAREN . SEMI

    SEMI            shift and go to state 35


state 31

    (10) VarDecls -> VarDecls COMMA . VarDecl
    (11) VarDecl -> . Type Name
    (12) Type -> . Name
    (13) Type -> . Type LBRACKET RBRACKET
    (14) Name -> . IDENT

    IDENT           shift and go to state 10

    VarDecl                        shift and go to state 36
    Type                           shift and go to state 26
    Name                           shift and go to state 8

state 32

    (11) VarDecl -> Type Name .

    COMMA           reduce using rule 11 (VarDecl -> Type Name .)
    RPAREN          reduce using rule 11 (VarDecl -> Type Name .)


state 33

    (20) FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN LPAREN . VarDeclsOpt RPAREN Block
    (7) VarDeclsOpt -> . VarDecls
    (8) VarDeclsOpt -> . empty
    (9) VarDecls -> . VarDecl
    (10) VarDecls -> . VarDecls COMMA VarDecl
    (99) empty -> .
    (11) VarDecl -> . Type Name
    (12) Type -> . Name
    (13) Type -> . Type LBRACKET RBRACKET
    (14) Name -> . IDENT

    RPAREN          reduce using rule 99 (empty -> .)
    IDENT           shift and go to state 10

    Type                           shift and go to state 26
    Name                           shift and go to state 8
    VarDeclsOpt                    shift and go to state 37
    VarDecls                       shift and go to state 23
    empty                          shift and go to state 24
    VarDecl                        shift and go to state 25

state 34

    (18) Parameters -> Parameters COMMA Parameter .

    COMMA           reduce using rule 18 (Parameters -> Parameters COMMA Parameter .)
    RPAREN          reduce using rule 18 (Parameters -> Parameters COMMA Parameter .)


state 35

    (6) StructDecl -> STRUCT Name LPAREN VarDeclsOpt RPAREN SEMI .

    STRUCT          reduce using rule 6 (StructDecl -> STRUCT Name LPAREN VarDeclsOpt RPAREN SEMI .)
    IDENT           reduce using rule 6 (StructDecl -> STRUCT Name LPAREN VarDeclsOpt RPAREN SEMI .)
    $end            reduce using rule 6 (StructDecl -> STRUCT Name LPAREN VarDeclsOpt RPAREN SEMI .)


state 36

    (10) VarDecls -> VarDecls COMMA VarDecl .

    COMMA           reduce using rule 10 (VarDecls -> VarDecls COMMA VarDecl .)
    RPAREN          reduce using rule 10 (VarDecls -> VarDecls COMMA VarDecl .)


state 37

    (20) FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt . RPAREN Block

    RPAREN          shift and go to state 38


state 38

    (20) FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN . Block
    (21) Block -> . LBRACE StatementsOpt RBRACE

    LBRACE          shift and go to state 40

    Block                          shift and go to state 39

state 39

    (20) FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block .

    STRUCT          reduce using rule 20 (FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block .)
    IDENT           reduce using rule 20 (FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block .)
    $end            reduce using rule 20 (FunctionDecl -> Type Name LPAREN ParametersOpt RPAREN LPAREN VarDeclsOpt RPAREN Block .)


state 40

    (21) Block -> LBRACE . StatementsOpt RBRACE
    (22) StatementsOpt -> . Statements
    (23) StatementsOpt -> . empty
    (24) Statements -> . Statement
    (25) Statements -> . Statements Statement
    (99) empty -> .
    (26) Statement -> . IfStatement
    (27) Statement -> . WhileStatement
    (28) Statement -> . ForStatement
    (29) Statement -> . BreakStatement
    (30) Statement -> . ContinueStatement
    (31) Statement -> . ReturnStatement
    (32) Statement -> . ExpressionStatement
    (33) IfStatement -> . IF LPAREN Expression RPAREN Block ElseOpt
    (37) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (38) ForStatement -> . FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block
    (39) BreakStatement -> . BREAK SEMI
    (40) ContinueStatement -> . CONTINUE SEMI
    (41) ReturnStatement -> . RETURN Expression SEMI
    (42) ReturnStatement -> . RETURN SEMI
    (43) ExpressionStatement -> . Expression SEMI
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    RBRACE          reduce using rule 99 (empty -> .)
    IF              shift and go to state 52
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    BREAK           shift and go to state 57
    CONTINUE        shift and go to state 58
    RETURN          shift and go to state 59
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    StatementsOpt                  shift and go to state 41
    Statements                     shift and go to state 42
    empty                          shift and go to state 43
    Statement                      shift and go to state 44
    IfStatement                    shift and go to state 45
    WhileStatement                 shift and go to state 46
    ForStatement                   shift and go to state 47
    BreakStatement                 shift and go to state 48
    ContinueStatement              shift and go to state 49
    ReturnStatement                shift and go to state 50
    ExpressionStatement            shift and go to state 51
    Expression                     shift and go to state 54
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 41

    (21) Block -> LBRACE StatementsOpt . RBRACE

    RBRACE          shift and go to state 88


state 42

    (22) StatementsOpt -> Statements .
    (25) Statements -> Statements . Statement
    (26) Statement -> . IfStatement
    (27) Statement -> . WhileStatement
    (28) Statement -> . ForStatement
    (29) Statement -> . BreakStatement
    (30) Statement -> . ContinueStatement
    (31) Statement -> . ReturnStatement
    (32) Statement -> . ExpressionStatement
    (33) IfStatement -> . IF LPAREN Expression RPAREN Block ElseOpt
    (37) WhileStatement -> . WHILE LPAREN Expression RPAREN Block
    (38) ForStatement -> . FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block
    (39) BreakStatement -> . BREAK SEMI
    (40) ContinueStatement -> . CONTINUE SEMI
    (41) ReturnStatement -> . RETURN Expression SEMI
    (42) ReturnStatement -> . RETURN SEMI
    (43) ExpressionStatement -> . Expression SEMI
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    RBRACE          reduce using rule 22 (StatementsOpt -> Statements .)
    IF              shift and go to state 52
    WHILE           shift and go to state 55
    FOR             shift and go to state 56
    BREAK           shift and go to state 57
    CONTINUE        shift and go to state 58
    RETURN          shift and go to state 59
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Statement                      shift and go to state 89
    IfStatement                    shift and go to state 45
    WhileStatement                 shift and go to state 46
    ForStatement                   shift and go to state 47
    BreakStatement                 shift and go to state 48
    ContinueStatement              shift and go to state 49
    ReturnStatement                shift and go to state 50
    ExpressionStatement            shift and go to state 51
    Expression                     shift and go to state 54
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 43

    (23) StatementsOpt -> empty .

    RBRACE          reduce using rule 23 (StatementsOpt -> empty .)


state 44

    (24) Statements -> Statement .

    IF              reduce using rule 24 (Statements -> Statement .)
    WHILE           reduce using rule 24 (Statements -> Statement .)
    FOR             reduce using rule 24 (Statements -> Statement .)
    BREAK           reduce using rule 24 (Statements -> Statement .)
    CONTINUE        reduce using rule 24 (Statements -> Statement .)
    RETURN          reduce using rule 24 (Statements -> Statement .)
    LPAREN          reduce using rule 24 (Statements -> Statement .)
    NEW             reduce using rule 24 (Statements -> Statement .)
    PLUS            reduce using rule 24 (Statements -> Statement .)
    MINUS           reduce using rule 24 (Statements -> Statement .)
    LNOT            reduce using rule 24 (Statements -> Statement .)
    INCREMENT       reduce using rule 24 (Statements -> Statement .)
    DECREMENT       reduce using rule 24 (Statements -> Statement .)
    ID              reduce using rule 24 (Statements -> Statement .)
    INTEGER         reduce using rule 24 (Statements -> Statement .)
    FLOAT           reduce using rule 24 (Statements -> Statement .)
    STRING          reduce using rule 24 (Statements -> Statement .)
    TRUE            reduce using rule 24 (Statements -> Statement .)
    FALSE           reduce using rule 24 (Statements -> Statement .)
    NULL            reduce using rule 24 (Statements -> Statement .)
    IDENT           reduce using rule 24 (Statements -> Statement .)
    RBRACE          reduce using rule 24 (Statements -> Statement .)


state 45

    (26) Statement -> IfStatement .

    IF              reduce using rule 26 (Statement -> IfStatement .)
    WHILE           reduce using rule 26 (Statement -> IfStatement .)
    FOR             reduce using rule 26 (Statement -> IfStatement .)
    BREAK           reduce using rule 26 (Statement -> IfStatement .)
    CONTINUE        reduce using rule 26 (Statement -> IfStatement .)
    RETURN          reduce using rule 26 (Statement -> IfStatement .)
    LPAREN          reduce using rule 26 (Statement -> IfStatement .)
    NEW             reduce using rule 26 (Statement -> IfStatement .)
    PLUS            reduce using rule 26 (Statement -> IfStatement .)
    MINUS           reduce using rule 26 (Statement -> IfStatement .)
    LNOT            reduce using rule 26 (Statement -> IfStatement .)
    INCREMENT       reduce using rule 26 (Statement -> IfStatement .)
    DECREMENT       reduce using rule 26 (Statement -> IfStatement .)
    ID              reduce using rule 26 (Statement -> IfStatement .)
    INTEGER         reduce using rule 26 (Statement -> IfStatement .)
    FLOAT           reduce using rule 26 (Statement -> IfStatement .)
    STRING          reduce using rule 26 (Statement -> IfStatement .)
    TRUE            reduce using rule 26 (Statement -> IfStatement .)
    FALSE           reduce using rule 26 (Statement -> IfStatement .)
    NULL            reduce using rule 26 (Statement -> IfStatement .)
    IDENT           reduce using rule 26 (Statement -> IfStatement .)
    RBRACE          reduce using rule 26 (Statement -> IfStatement .)


state 46

    (27) Statement -> WhileStatement .

    IF              reduce using rule 27 (Statement -> WhileStatement .)
    WHILE           reduce using rule 27 (Statement -> WhileStatement .)
    FOR             reduce using rule 27 (Statement -> WhileStatement .)
    BREAK           reduce using rule 27 (Statement -> WhileStatement .)
    CONTINUE        reduce using rule 27 (Statement -> WhileStatement .)
    RETURN          reduce using rule 27 (Statement -> WhileStatement .)
    LPAREN          reduce using rule 27 (Statement -> WhileStatement .)
    NEW             reduce using rule 27 (Statement -> WhileStatement .)
    PLUS            reduce using rule 27 (Statement -> WhileStatement .)
    MINUS           reduce using rule 27 (Statement -> WhileStatement .)
    LNOT            reduce using rule 27 (Statement -> WhileStatement .)
    INCREMENT       reduce using rule 27 (Statement -> WhileStatement .)
    DECREMENT       reduce using rule 27 (Statement -> WhileStatement .)
    ID              reduce using rule 27 (Statement -> WhileStatement .)
    INTEGER         reduce using rule 27 (Statement -> WhileStatement .)
    FLOAT           reduce using rule 27 (Statement -> WhileStatement .)
    STRING          reduce using rule 27 (Statement -> WhileStatement .)
    TRUE            reduce using rule 27 (Statement -> WhileStatement .)
    FALSE           reduce using rule 27 (Statement -> WhileStatement .)
    NULL            reduce using rule 27 (Statement -> WhileStatement .)
    IDENT           reduce using rule 27 (Statement -> WhileStatement .)
    RBRACE          reduce using rule 27 (Statement -> WhileStatement .)


state 47

    (28) Statement -> ForStatement .

    IF              reduce using rule 28 (Statement -> ForStatement .)
    WHILE           reduce using rule 28 (Statement -> ForStatement .)
    FOR             reduce using rule 28 (Statement -> ForStatement .)
    BREAK           reduce using rule 28 (Statement -> ForStatement .)
    CONTINUE        reduce using rule 28 (Statement -> ForStatement .)
    RETURN          reduce using rule 28 (Statement -> ForStatement .)
    LPAREN          reduce using rule 28 (Statement -> ForStatement .)
    NEW             reduce using rule 28 (Statement -> ForStatement .)
    PLUS            reduce using rule 28 (Statement -> ForStatement .)
    MINUS           reduce using rule 28 (Statement -> ForStatement .)
    LNOT            reduce using rule 28 (Statement -> ForStatement .)
    INCREMENT       reduce using rule 28 (Statement -> ForStatement .)
    DECREMENT       reduce using rule 28 (Statement -> ForStatement .)
    ID              reduce using rule 28 (Statement -> ForStatement .)
    INTEGER         reduce using rule 28 (Statement -> ForStatement .)
    FLOAT           reduce using rule 28 (Statement -> ForStatement .)
    STRING          reduce using rule 28 (Statement -> ForStatement .)
    TRUE            reduce using rule 28 (Statement -> ForStatement .)
    FALSE           reduce using rule 28 (Statement -> ForStatement .)
    NULL            reduce using rule 28 (Statement -> ForStatement .)
    IDENT           reduce using rule 28 (Statement -> ForStatement .)
    RBRACE          reduce using rule 28 (Statement -> ForStatement .)


state 48

    (29) Statement -> BreakStatement .

    IF              reduce using rule 29 (Statement -> BreakStatement .)
    WHILE           reduce using rule 29 (Statement -> BreakStatement .)
    FOR             reduce using rule 29 (Statement -> BreakStatement .)
    BREAK           reduce using rule 29 (Statement -> BreakStatement .)
    CONTINUE        reduce using rule 29 (Statement -> BreakStatement .)
    RETURN          reduce using rule 29 (Statement -> BreakStatement .)
    LPAREN          reduce using rule 29 (Statement -> BreakStatement .)
    NEW             reduce using rule 29 (Statement -> BreakStatement .)
    PLUS            reduce using rule 29 (Statement -> BreakStatement .)
    MINUS           reduce using rule 29 (Statement -> BreakStatement .)
    LNOT            reduce using rule 29 (Statement -> BreakStatement .)
    INCREMENT       reduce using rule 29 (Statement -> BreakStatement .)
    DECREMENT       reduce using rule 29 (Statement -> BreakStatement .)
    ID              reduce using rule 29 (Statement -> BreakStatement .)
    INTEGER         reduce using rule 29 (Statement -> BreakStatement .)
    FLOAT           reduce using rule 29 (Statement -> BreakStatement .)
    STRING          reduce using rule 29 (Statement -> BreakStatement .)
    TRUE            reduce using rule 29 (Statement -> BreakStatement .)
    FALSE           reduce using rule 29 (Statement -> BreakStatement .)
    NULL            reduce using rule 29 (Statement -> BreakStatement .)
    IDENT           reduce using rule 29 (Statement -> BreakStatement .)
    RBRACE          reduce using rule 29 (Statement -> BreakStatement .)


state 49

    (30) Statement -> ContinueStatement .

    IF              reduce using rule 30 (Statement -> ContinueStatement .)
    WHILE           reduce using rule 30 (Statement -> ContinueStatement .)
    FOR             reduce using rule 30 (Statement -> ContinueStatement .)
    BREAK           reduce using rule 30 (Statement -> ContinueStatement .)
    CONTINUE        reduce using rule 30 (Statement -> ContinueStatement .)
    RETURN          reduce using rule 30 (Statement -> ContinueStatement .)
    LPAREN          reduce using rule 30 (Statement -> ContinueStatement .)
    NEW             reduce using rule 30 (Statement -> ContinueStatement .)
    PLUS            reduce using rule 30 (Statement -> ContinueStatement .)
    MINUS           reduce using rule 30 (Statement -> ContinueStatement .)
    LNOT            reduce using rule 30 (Statement -> ContinueStatement .)
    INCREMENT       reduce using rule 30 (Statement -> ContinueStatement .)
    DECREMENT       reduce using rule 30 (Statement -> ContinueStatement .)
    ID              reduce using rule 30 (Statement -> ContinueStatement .)
    INTEGER         reduce using rule 30 (Statement -> ContinueStatement .)
    FLOAT           reduce using rule 30 (Statement -> ContinueStatement .)
    STRING          reduce using rule 30 (Statement -> ContinueStatement .)
    TRUE            reduce using rule 30 (Statement -> ContinueStatement .)
    FALSE           reduce using rule 30 (Statement -> ContinueStatement .)
    NULL            reduce using rule 30 (Statement -> ContinueStatement .)
    IDENT           reduce using rule 30 (Statement -> ContinueStatement .)
    RBRACE          reduce using rule 30 (Statement -> ContinueStatement .)


state 50

    (31) Statement -> ReturnStatement .

    IF              reduce using rule 31 (Statement -> ReturnStatement .)
    WHILE           reduce using rule 31 (Statement -> ReturnStatement .)
    FOR             reduce using rule 31 (Statement -> ReturnStatement .)
    BREAK           reduce using rule 31 (Statement -> ReturnStatement .)
    CONTINUE        reduce using rule 31 (Statement -> ReturnStatement .)
    RETURN          reduce using rule 31 (Statement -> ReturnStatement .)
    LPAREN          reduce using rule 31 (Statement -> ReturnStatement .)
    NEW             reduce using rule 31 (Statement -> ReturnStatement .)
    PLUS            reduce using rule 31 (Statement -> ReturnStatement .)
    MINUS           reduce using rule 31 (Statement -> ReturnStatement .)
    LNOT            reduce using rule 31 (Statement -> ReturnStatement .)
    INCREMENT       reduce using rule 31 (Statement -> ReturnStatement .)
    DECREMENT       reduce using rule 31 (Statement -> ReturnStatement .)
    ID              reduce using rule 31 (Statement -> ReturnStatement .)
    INTEGER         reduce using rule 31 (Statement -> ReturnStatement .)
    FLOAT           reduce using rule 31 (Statement -> ReturnStatement .)
    STRING          reduce using rule 31 (Statement -> ReturnStatement .)
    TRUE            reduce using rule 31 (Statement -> ReturnStatement .)
    FALSE           reduce using rule 31 (Statement -> ReturnStatement .)
    NULL            reduce using rule 31 (Statement -> ReturnStatement .)
    IDENT           reduce using rule 31 (Statement -> ReturnStatement .)
    RBRACE          reduce using rule 31 (Statement -> ReturnStatement .)


state 51

    (32) Statement -> ExpressionStatement .

    IF              reduce using rule 32 (Statement -> ExpressionStatement .)
    WHILE           reduce using rule 32 (Statement -> ExpressionStatement .)
    FOR             reduce using rule 32 (Statement -> ExpressionStatement .)
    BREAK           reduce using rule 32 (Statement -> ExpressionStatement .)
    CONTINUE        reduce using rule 32 (Statement -> ExpressionStatement .)
    RETURN          reduce using rule 32 (Statement -> ExpressionStatement .)
    LPAREN          reduce using rule 32 (Statement -> ExpressionStatement .)
    NEW             reduce using rule 32 (Statement -> ExpressionStatement .)
    PLUS            reduce using rule 32 (Statement -> ExpressionStatement .)
    MINUS           reduce using rule 32 (Statement -> ExpressionStatement .)
    LNOT            reduce using rule 32 (Statement -> ExpressionStatement .)
    INCREMENT       reduce using rule 32 (Statement -> ExpressionStatement .)
    DECREMENT       reduce using rule 32 (Statement -> ExpressionStatement .)
    ID              reduce using rule 32 (Statement -> ExpressionStatement .)
    INTEGER         reduce using rule 32 (Statement -> ExpressionStatement .)
    FLOAT           reduce using rule 32 (Statement -> ExpressionStatement .)
    STRING          reduce using rule 32 (Statement -> ExpressionStatement .)
    TRUE            reduce using rule 32 (Statement -> ExpressionStatement .)
    FALSE           reduce using rule 32 (Statement -> ExpressionStatement .)
    NULL            reduce using rule 32 (Statement -> ExpressionStatement .)
    IDENT           reduce using rule 32 (Statement -> ExpressionStatement .)
    RBRACE          reduce using rule 32 (Statement -> ExpressionStatement .)


state 52

    (33) IfStatement -> IF . LPAREN Expression RPAREN Block ElseOpt

    LPAREN          shift and go to state 90


state 53

    (67) ParenthesizedExpression -> LPAREN . Expression RPAREN
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 91
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 54

    (43) ExpressionStatement -> Expression . SEMI
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            shift and go to state 92
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 55

    (37) WhileStatement -> WHILE . LPAREN Expression RPAREN Block

    LPAREN          shift and go to state 111


state 56

    (38) ForStatement -> FOR . LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block

    LPAREN          shift and go to state 112


state 57

    (39) BreakStatement -> BREAK . SEMI

    SEMI            shift and go to state 113


state 58

    (40) ContinueStatement -> CONTINUE . SEMI

    SEMI            shift and go to state 114


state 59

    (41) ReturnStatement -> RETURN . Expression SEMI
    (42) ReturnStatement -> RETURN . SEMI
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    SEMI            shift and go to state 116
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 115
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 60

    (44) Expression -> Literal .

    SEMI            reduce using rule 44 (Expression -> Literal .)
    PERIOD          reduce using rule 44 (Expression -> Literal .)
    LBRACKET        reduce using rule 44 (Expression -> Literal .)
    PLUS            reduce using rule 44 (Expression -> Literal .)
    MINUS           reduce using rule 44 (Expression -> Literal .)
    TIMES           reduce using rule 44 (Expression -> Literal .)
    DIVIDE          reduce using rule 44 (Expression -> Literal .)
    MODULO          reduce using rule 44 (Expression -> Literal .)
    LOR             reduce using rule 44 (Expression -> Literal .)
    LAND            reduce using rule 44 (Expression -> Literal .)
    LT              reduce using rule 44 (Expression -> Literal .)
    LE              reduce using rule 44 (Expression -> Literal .)
    GT              reduce using rule 44 (Expression -> Literal .)
    GE              reduce using rule 44 (Expression -> Literal .)
    EQ              reduce using rule 44 (Expression -> Literal .)
    NE              reduce using rule 44 (Expression -> Literal .)
    EQUALS          reduce using rule 44 (Expression -> Literal .)
    PUSH            reduce using rule 44 (Expression -> Literal .)
    POP             reduce using rule 44 (Expression -> Literal .)
    RPAREN          reduce using rule 44 (Expression -> Literal .)
    RBRACKET        reduce using rule 44 (Expression -> Literal .)
    COMMA           reduce using rule 44 (Expression -> Literal .)
    RBRACE          reduce using rule 44 (Expression -> Literal .)


state 61

    (45) Expression -> NameExpression .

    SEMI            reduce using rule 45 (Expression -> NameExpression .)
    PERIOD          reduce using rule 45 (Expression -> NameExpression .)
    LBRACKET        reduce using rule 45 (Expression -> NameExpression .)
    PLUS            reduce using rule 45 (Expression -> NameExpression .)
    MINUS           reduce using rule 45 (Expression -> NameExpression .)
    TIMES           reduce using rule 45 (Expression -> NameExpression .)
    DIVIDE          reduce using rule 45 (Expression -> NameExpression .)
    MODULO          reduce using rule 45 (Expression -> NameExpression .)
    LOR             reduce using rule 45 (Expression -> NameExpression .)
    LAND            reduce using rule 45 (Expression -> NameExpression .)
    LT              reduce using rule 45 (Expression -> NameExpression .)
    LE              reduce using rule 45 (Expression -> NameExpression .)
    GT              reduce using rule 45 (Expression -> NameExpression .)
    GE              reduce using rule 45 (Expression -> NameExpression .)
    EQ              reduce using rule 45 (Expression -> NameExpression .)
    NE              reduce using rule 45 (Expression -> NameExpression .)
    EQUALS          reduce using rule 45 (Expression -> NameExpression .)
    PUSH            reduce using rule 45 (Expression -> NameExpression .)
    POP             reduce using rule 45 (Expression -> NameExpression .)
    RPAREN          reduce using rule 45 (Expression -> NameExpression .)
    RBRACKET        reduce using rule 45 (Expression -> NameExpression .)
    COMMA           reduce using rule 45 (Expression -> NameExpression .)
    RBRACE          reduce using rule 45 (Expression -> NameExpression .)


state 62

    (46) Expression -> ParenthesizedExpression .

    SEMI            reduce using rule 46 (Expression -> ParenthesizedExpression .)
    PERIOD          reduce using rule 46 (Expression -> ParenthesizedExpression .)
    LBRACKET        reduce using rule 46 (Expression -> ParenthesizedExpression .)
    PLUS            reduce using rule 46 (Expression -> ParenthesizedExpression .)
    MINUS           reduce using rule 46 (Expression -> ParenthesizedExpression .)
    TIMES           reduce using rule 46 (Expression -> ParenthesizedExpression .)
    DIVIDE          reduce using rule 46 (Expression -> ParenthesizedExpression .)
    MODULO          reduce using rule 46 (Expression -> ParenthesizedExpression .)
    LOR             reduce using rule 46 (Expression -> ParenthesizedExpression .)
    LAND            reduce using rule 46 (Expression -> ParenthesizedExpression .)
    LT              reduce using rule 46 (Expression -> ParenthesizedExpression .)
    LE              reduce using rule 46 (Expression -> ParenthesizedExpression .)
    GT              reduce using rule 46 (Expression -> ParenthesizedExpression .)
    GE              reduce using rule 46 (Expression -> ParenthesizedExpression .)
    EQ              reduce using rule 46 (Expression -> ParenthesizedExpression .)
    NE              reduce using rule 46 (Expression -> ParenthesizedExpression .)
    EQUALS          reduce using rule 46 (Expression -> ParenthesizedExpression .)
    PUSH            reduce using rule 46 (Expression -> ParenthesizedExpression .)
    POP             reduce using rule 46 (Expression -> ParenthesizedExpression .)
    RPAREN          reduce using rule 46 (Expression -> ParenthesizedExpression .)
    RBRACKET        reduce using rule 46 (Expression -> ParenthesizedExpression .)
    COMMA           reduce using rule 46 (Expression -> ParenthesizedExpression .)
    RBRACE          reduce using rule 46 (Expression -> ParenthesizedExpression .)


state 63

    (47) Expression -> CallExpression .

    SEMI            reduce using rule 47 (Expression -> CallExpression .)
    PERIOD          reduce using rule 47 (Expression -> CallExpression .)
    LBRACKET        reduce using rule 47 (Expression -> CallExpression .)
    PLUS            reduce using rule 47 (Expression -> CallExpression .)
    MINUS           reduce using rule 47 (Expression -> CallExpression .)
    TIMES           reduce using rule 47 (Expression -> CallExpression .)
    DIVIDE          reduce using rule 47 (Expression -> CallExpression .)
    MODULO          reduce using rule 47 (Expression -> CallExpression .)
    LOR             reduce using rule 47 (Expression -> CallExpression .)
    LAND            reduce using rule 47 (Expression -> CallExpression .)
    LT              reduce using rule 47 (Expression -> CallExpression .)
    LE              reduce using rule 47 (Expression -> CallExpression .)
    GT              reduce using rule 47 (Expression -> CallExpression .)
    GE              reduce using rule 47 (Expression -> CallExpression .)
    EQ              reduce using rule 47 (Expression -> CallExpression .)
    NE              reduce using rule 47 (Expression -> CallExpression .)
    EQUALS          reduce using rule 47 (Expression -> CallExpression .)
    PUSH            reduce using rule 47 (Expression -> CallExpression .)
    POP             reduce using rule 47 (Expression -> CallExpression .)
    RPAREN          reduce using rule 47 (Expression -> CallExpression .)
    RBRACKET        reduce using rule 47 (Expression -> CallExpression .)
    COMMA           reduce using rule 47 (Expression -> CallExpression .)
    RBRACE          reduce using rule 47 (Expression -> CallExpression .)


state 64

    (48) Expression -> NewExpression .

    SEMI            reduce using rule 48 (Expression -> NewExpression .)
    PERIOD          reduce using rule 48 (Expression -> NewExpression .)
    LBRACKET        reduce using rule 48 (Expression -> NewExpression .)
    PLUS            reduce using rule 48 (Expression -> NewExpression .)
    MINUS           reduce using rule 48 (Expression -> NewExpression .)
    TIMES           reduce using rule 48 (Expression -> NewExpression .)
    DIVIDE          reduce using rule 48 (Expression -> NewExpression .)
    MODULO          reduce using rule 48 (Expression -> NewExpression .)
    LOR             reduce using rule 48 (Expression -> NewExpression .)
    LAND            reduce using rule 48 (Expression -> NewExpression .)
    LT              reduce using rule 48 (Expression -> NewExpression .)
    LE              reduce using rule 48 (Expression -> NewExpression .)
    GT              reduce using rule 48 (Expression -> NewExpression .)
    GE              reduce using rule 48 (Expression -> NewExpression .)
    EQ              reduce using rule 48 (Expression -> NewExpression .)
    NE              reduce using rule 48 (Expression -> NewExpression .)
    EQUALS          reduce using rule 48 (Expression -> NewExpression .)
    PUSH            reduce using rule 48 (Expression -> NewExpression .)
    POP             reduce using rule 48 (Expression -> NewExpression .)
    RPAREN          reduce using rule 48 (Expression -> NewExpression .)
    RBRACKET        reduce using rule 48 (Expression -> NewExpression .)
    COMMA           reduce using rule 48 (Expression -> NewExpression .)
    RBRACE          reduce using rule 48 (Expression -> NewExpression .)


state 65

    (49) Expression -> FieldAccessExpression .

    SEMI            reduce using rule 49 (Expression -> FieldAccessExpression .)
    PERIOD          reduce using rule 49 (Expression -> FieldAccessExpression .)
    LBRACKET        reduce using rule 49 (Expression -> FieldAccessExpression .)
    PLUS            reduce using rule 49 (Expression -> FieldAccessExpression .)
    MINUS           reduce using rule 49 (Expression -> FieldAccessExpression .)
    TIMES           reduce using rule 49 (Expression -> FieldAccessExpression .)
    DIVIDE          reduce using rule 49 (Expression -> FieldAccessExpression .)
    MODULO          reduce using rule 49 (Expression -> FieldAccessExpression .)
    LOR             reduce using rule 49 (Expression -> FieldAccessExpression .)
    LAND            reduce using rule 49 (Expression -> FieldAccessExpression .)
    LT              reduce using rule 49 (Expression -> FieldAccessExpression .)
    LE              reduce using rule 49 (Expression -> FieldAccessExpression .)
    GT              reduce using rule 49 (Expression -> FieldAccessExpression .)
    GE              reduce using rule 49 (Expression -> FieldAccessExpression .)
    EQ              reduce using rule 49 (Expression -> FieldAccessExpression .)
    NE              reduce using rule 49 (Expression -> FieldAccessExpression .)
    EQUALS          reduce using rule 49 (Expression -> FieldAccessExpression .)
    PUSH            reduce using rule 49 (Expression -> FieldAccessExpression .)
    POP             reduce using rule 49 (Expression -> FieldAccessExpression .)
    RPAREN          reduce using rule 49 (Expression -> FieldAccessExpression .)
    RBRACKET        reduce using rule 49 (Expression -> FieldAccessExpression .)
    COMMA           reduce using rule 49 (Expression -> FieldAccessExpression .)
    RBRACE          reduce using rule 49 (Expression -> FieldAccessExpression .)


state 66

    (50) Expression -> ArrayIndexExpression .

    SEMI            reduce using rule 50 (Expression -> ArrayIndexExpression .)
    PERIOD          reduce using rule 50 (Expression -> ArrayIndexExpression .)
    LBRACKET        reduce using rule 50 (Expression -> ArrayIndexExpression .)
    PLUS            reduce using rule 50 (Expression -> ArrayIndexExpression .)
    MINUS           reduce using rule 50 (Expression -> ArrayIndexExpression .)
    TIMES           reduce using rule 50 (Expression -> ArrayIndexExpression .)
    DIVIDE          reduce using rule 50 (Expression -> ArrayIndexExpression .)
    MODULO          reduce using rule 50 (Expression -> ArrayIndexExpression .)
    LOR             reduce using rule 50 (Expression -> ArrayIndexExpression .)
    LAND            reduce using rule 50 (Expression -> ArrayIndexExpression .)
    LT              reduce using rule 50 (Expression -> ArrayIndexExpression .)
    LE              reduce using rule 50 (Expression -> ArrayIndexExpression .)
    GT              reduce using rule 50 (Expression -> ArrayIndexExpression .)
    GE              reduce using rule 50 (Expression -> ArrayIndexExpression .)
    EQ              reduce using rule 50 (Expression -> ArrayIndexExpression .)
    NE              reduce using rule 50 (Expression -> ArrayIndexExpression .)
    EQUALS          reduce using rule 50 (Expression -> ArrayIndexExpression .)
    PUSH            reduce using rule 50 (Expression -> ArrayIndexExpression .)
    POP             reduce using rule 50 (Expression -> ArrayIndexExpression .)
    RPAREN          reduce using rule 50 (Expression -> ArrayIndexExpression .)
    RBRACKET        reduce using rule 50 (Expression -> ArrayIndexExpression .)
    COMMA           reduce using rule 50 (Expression -> ArrayIndexExpression .)
    RBRACE          reduce using rule 50 (Expression -> ArrayIndexExpression .)


state 67

    (51) Expression -> UnaryPrefixOperation .

    SEMI            reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    PERIOD          reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    LBRACKET        reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    PLUS            reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    MINUS           reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    TIMES           reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    DIVIDE          reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    MODULO          reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    LOR             reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    LAND            reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    LT              reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    LE              reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    GT              reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    GE              reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    EQ              reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    NE              reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    EQUALS          reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    PUSH            reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    POP             reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    RPAREN          reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    RBRACKET        reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    COMMA           reduce using rule 51 (Expression -> UnaryPrefixOperation .)
    RBRACE          reduce using rule 51 (Expression -> UnaryPrefixOperation .)


state 68

    (52) Expression -> BinaryOperation .

    SEMI            reduce using rule 52 (Expression -> BinaryOperation .)
    PERIOD          reduce using rule 52 (Expression -> BinaryOperation .)
    LBRACKET        reduce using rule 52 (Expression -> BinaryOperation .)
    PLUS            reduce using rule 52 (Expression -> BinaryOperation .)
    MINUS           reduce using rule 52 (Expression -> BinaryOperation .)
    TIMES           reduce using rule 52 (Expression -> BinaryOperation .)
    DIVIDE          reduce using rule 52 (Expression -> BinaryOperation .)
    MODULO          reduce using rule 52 (Expression -> BinaryOperation .)
    LOR             reduce using rule 52 (Expression -> BinaryOperation .)
    LAND            reduce using rule 52 (Expression -> BinaryOperation .)
    LT              reduce using rule 52 (Expression -> BinaryOperation .)
    LE              reduce using rule 52 (Expression -> BinaryOperation .)
    GT              reduce using rule 52 (Expression -> BinaryOperation .)
    GE              reduce using rule 52 (Expression -> BinaryOperation .)
    EQ              reduce using rule 52 (Expression -> BinaryOperation .)
    NE              reduce using rule 52 (Expression -> BinaryOperation .)
    EQUALS          reduce using rule 52 (Expression -> BinaryOperation .)
    PUSH            reduce using rule 52 (Expression -> BinaryOperation .)
    POP             reduce using rule 52 (Expression -> BinaryOperation .)
    RPAREN          reduce using rule 52 (Expression -> BinaryOperation .)
    RBRACKET        reduce using rule 52 (Expression -> BinaryOperation .)
    COMMA           reduce using rule 52 (Expression -> BinaryOperation .)
    RBRACE          reduce using rule 52 (Expression -> BinaryOperation .)


state 69

    (55) Literal -> IntegerLiteral .

    SEMI            reduce using rule 55 (Literal -> IntegerLiteral .)
    PERIOD          reduce using rule 55 (Literal -> IntegerLiteral .)
    LBRACKET        reduce using rule 55 (Literal -> IntegerLiteral .)
    PLUS            reduce using rule 55 (Literal -> IntegerLiteral .)
    MINUS           reduce using rule 55 (Literal -> IntegerLiteral .)
    TIMES           reduce using rule 55 (Literal -> IntegerLiteral .)
    DIVIDE          reduce using rule 55 (Literal -> IntegerLiteral .)
    MODULO          reduce using rule 55 (Literal -> IntegerLiteral .)
    LOR             reduce using rule 55 (Literal -> IntegerLiteral .)
    LAND            reduce using rule 55 (Literal -> IntegerLiteral .)
    LT              reduce using rule 55 (Literal -> IntegerLiteral .)
    LE              reduce using rule 55 (Literal -> IntegerLiteral .)
    GT              reduce using rule 55 (Literal -> IntegerLiteral .)
    GE              reduce using rule 55 (Literal -> IntegerLiteral .)
    EQ              reduce using rule 55 (Literal -> IntegerLiteral .)
    NE              reduce using rule 55 (Literal -> IntegerLiteral .)
    EQUALS          reduce using rule 55 (Literal -> IntegerLiteral .)
    PUSH            reduce using rule 55 (Literal -> IntegerLiteral .)
    POP             reduce using rule 55 (Literal -> IntegerLiteral .)
    RPAREN          reduce using rule 55 (Literal -> IntegerLiteral .)
    RBRACKET        reduce using rule 55 (Literal -> IntegerLiteral .)
    COMMA           reduce using rule 55 (Literal -> IntegerLiteral .)
    RBRACE          reduce using rule 55 (Literal -> IntegerLiteral .)


state 70

    (56) Literal -> FloatLiteral .

    SEMI            reduce using rule 56 (Literal -> FloatLiteral .)
    PERIOD          reduce using rule 56 (Literal -> FloatLiteral .)
    LBRACKET        reduce using rule 56 (Literal -> FloatLiteral .)
    PLUS            reduce using rule 56 (Literal -> FloatLiteral .)
    MINUS           reduce using rule 56 (Literal -> FloatLiteral .)
    TIMES           reduce using rule 56 (Literal -> FloatLiteral .)
    DIVIDE          reduce using rule 56 (Literal -> FloatLiteral .)
    MODULO          reduce using rule 56 (Literal -> FloatLiteral .)
    LOR             reduce using rule 56 (Literal -> FloatLiteral .)
    LAND            reduce using rule 56 (Literal -> FloatLiteral .)
    LT              reduce using rule 56 (Literal -> FloatLiteral .)
    LE              reduce using rule 56 (Literal -> FloatLiteral .)
    GT              reduce using rule 56 (Literal -> FloatLiteral .)
    GE              reduce using rule 56 (Literal -> FloatLiteral .)
    EQ              reduce using rule 56 (Literal -> FloatLiteral .)
    NE              reduce using rule 56 (Literal -> FloatLiteral .)
    EQUALS          reduce using rule 56 (Literal -> FloatLiteral .)
    PUSH            reduce using rule 56 (Literal -> FloatLiteral .)
    POP             reduce using rule 56 (Literal -> FloatLiteral .)
    RPAREN          reduce using rule 56 (Literal -> FloatLiteral .)
    RBRACKET        reduce using rule 56 (Literal -> FloatLiteral .)
    COMMA           reduce using rule 56 (Literal -> FloatLiteral .)
    RBRACE          reduce using rule 56 (Literal -> FloatLiteral .)


state 71

    (57) Literal -> StringLiteral .

    SEMI            reduce using rule 57 (Literal -> StringLiteral .)
    PERIOD          reduce using rule 57 (Literal -> StringLiteral .)
    LBRACKET        reduce using rule 57 (Literal -> StringLiteral .)
    PLUS            reduce using rule 57 (Literal -> StringLiteral .)
    MINUS           reduce using rule 57 (Literal -> StringLiteral .)
    TIMES           reduce using rule 57 (Literal -> StringLiteral .)
    DIVIDE          reduce using rule 57 (Literal -> StringLiteral .)
    MODULO          reduce using rule 57 (Literal -> StringLiteral .)
    LOR             reduce using rule 57 (Literal -> StringLiteral .)
    LAND            reduce using rule 57 (Literal -> StringLiteral .)
    LT              reduce using rule 57 (Literal -> StringLiteral .)
    LE              reduce using rule 57 (Literal -> StringLiteral .)
    GT              reduce using rule 57 (Literal -> StringLiteral .)
    GE              reduce using rule 57 (Literal -> StringLiteral .)
    EQ              reduce using rule 57 (Literal -> StringLiteral .)
    NE              reduce using rule 57 (Literal -> StringLiteral .)
    EQUALS          reduce using rule 57 (Literal -> StringLiteral .)
    PUSH            reduce using rule 57 (Literal -> StringLiteral .)
    POP             reduce using rule 57 (Literal -> StringLiteral .)
    RPAREN          reduce using rule 57 (Literal -> StringLiteral .)
    RBRACKET        reduce using rule 57 (Literal -> StringLiteral .)
    COMMA           reduce using rule 57 (Literal -> StringLiteral .)
    RBRACE          reduce using rule 57 (Literal -> StringLiteral .)


state 72

    (58) Literal -> BooleanLiteral .

    SEMI            reduce using rule 58 (Literal -> BooleanLiteral .)
    PERIOD          reduce using rule 58 (Literal -> BooleanLiteral .)
    LBRACKET        reduce using rule 58 (Literal -> BooleanLiteral .)
    PLUS            reduce using rule 58 (Literal -> BooleanLiteral .)
    MINUS           reduce using rule 58 (Literal -> BooleanLiteral .)
    TIMES           reduce using rule 58 (Literal -> BooleanLiteral .)
    DIVIDE          reduce using rule 58 (Literal -> BooleanLiteral .)
    MODULO          reduce using rule 58 (Literal -> BooleanLiteral .)
    LOR             reduce using rule 58 (Literal -> BooleanLiteral .)
    LAND            reduce using rule 58 (Literal -> BooleanLiteral .)
    LT              reduce using rule 58 (Literal -> BooleanLiteral .)
    LE              reduce using rule 58 (Literal -> BooleanLiteral .)
    GT              reduce using rule 58 (Literal -> BooleanLiteral .)
    GE              reduce using rule 58 (Literal -> BooleanLiteral .)
    EQ              reduce using rule 58 (Literal -> BooleanLiteral .)
    NE              reduce using rule 58 (Literal -> BooleanLiteral .)
    EQUALS          reduce using rule 58 (Literal -> BooleanLiteral .)
    PUSH            reduce using rule 58 (Literal -> BooleanLiteral .)
    POP             reduce using rule 58 (Literal -> BooleanLiteral .)
    RPAREN          reduce using rule 58 (Literal -> BooleanLiteral .)
    RBRACKET        reduce using rule 58 (Literal -> BooleanLiteral .)
    COMMA           reduce using rule 58 (Literal -> BooleanLiteral .)
    RBRACE          reduce using rule 58 (Literal -> BooleanLiteral .)


state 73

    (59) Literal -> NullLiteral .

    SEMI            reduce using rule 59 (Literal -> NullLiteral .)
    PERIOD          reduce using rule 59 (Literal -> NullLiteral .)
    LBRACKET        reduce using rule 59 (Literal -> NullLiteral .)
    PLUS            reduce using rule 59 (Literal -> NullLiteral .)
    MINUS           reduce using rule 59 (Literal -> NullLiteral .)
    TIMES           reduce using rule 59 (Literal -> NullLiteral .)
    DIVIDE          reduce using rule 59 (Literal -> NullLiteral .)
    MODULO          reduce using rule 59 (Literal -> NullLiteral .)
    LOR             reduce using rule 59 (Literal -> NullLiteral .)
    LAND            reduce using rule 59 (Literal -> NullLiteral .)
    LT              reduce using rule 59 (Literal -> NullLiteral .)
    LE              reduce using rule 59 (Literal -> NullLiteral .)
    GT              reduce using rule 59 (Literal -> NullLiteral .)
    GE              reduce using rule 59 (Literal -> NullLiteral .)
    EQ              reduce using rule 59 (Literal -> NullLiteral .)
    NE              reduce using rule 59 (Literal -> NullLiteral .)
    EQUALS          reduce using rule 59 (Literal -> NullLiteral .)
    PUSH            reduce using rule 59 (Literal -> NullLiteral .)
    POP             reduce using rule 59 (Literal -> NullLiteral .)
    RPAREN          reduce using rule 59 (Literal -> NullLiteral .)
    RBRACKET        reduce using rule 59 (Literal -> NullLiteral .)
    COMMA           reduce using rule 59 (Literal -> NullLiteral .)
    RBRACE          reduce using rule 59 (Literal -> NullLiteral .)


state 74

    (66) NameExpression -> Name .
    (68) CallExpression -> Name . LPAREN ArgumentsOpt RPAREN

    SEMI            reduce using rule 66 (NameExpression -> Name .)
    PERIOD          reduce using rule 66 (NameExpression -> Name .)
    LBRACKET        reduce using rule 66 (NameExpression -> Name .)
    PLUS            reduce using rule 66 (NameExpression -> Name .)
    MINUS           reduce using rule 66 (NameExpression -> Name .)
    TIMES           reduce using rule 66 (NameExpression -> Name .)
    DIVIDE          reduce using rule 66 (NameExpression -> Name .)
    MODULO          reduce using rule 66 (NameExpression -> Name .)
    LOR             reduce using rule 66 (NameExpression -> Name .)
    LAND            reduce using rule 66 (NameExpression -> Name .)
    LT              reduce using rule 66 (NameExpression -> Name .)
    LE              reduce using rule 66 (NameExpression -> Name .)
    GT              reduce using rule 66 (NameExpression -> Name .)
    GE              reduce using rule 66 (NameExpression -> Name .)
    EQ              reduce using rule 66 (NameExpression -> Name .)
    NE              reduce using rule 66 (NameExpression -> Name .)
    EQUALS          reduce using rule 66 (NameExpression -> Name .)
    PUSH            reduce using rule 66 (NameExpression -> Name .)
    POP             reduce using rule 66 (NameExpression -> Name .)
    RPAREN          reduce using rule 66 (NameExpression -> Name .)
    RBRACKET        reduce using rule 66 (NameExpression -> Name .)
    COMMA           reduce using rule 66 (NameExpression -> Name .)
    RBRACE          reduce using rule 66 (NameExpression -> Name .)
    LPAREN          shift and go to state 117


state 75

    (73) NewExpression -> NEW . Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> NEW . Type LBRACE ArgumentsOpt RBRACE
    (12) Type -> . Name
    (13) Type -> . Type LBRACKET RBRACKET
    (14) Name -> . IDENT

    IDENT           shift and go to state 10

    Type                           shift and go to state 118
    Name                           shift and go to state 8

state 76

    (77) UnaryPrefixOperation -> PLUS . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 119
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 77

    (78) UnaryPrefixOperation -> MINUS . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 120
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 78

    (79) UnaryPrefixOperation -> LNOT . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 121
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 79

    (80) UnaryPrefixOperation -> INCREMENT . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 122
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 80

    (81) UnaryPrefixOperation -> DECREMENT . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 123
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 81

    (82) UnaryPrefixOperation -> ID . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 124
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 82

    (60) IntegerLiteral -> INTEGER .

    SEMI            reduce using rule 60 (IntegerLiteral -> INTEGER .)
    PERIOD          reduce using rule 60 (IntegerLiteral -> INTEGER .)
    LBRACKET        reduce using rule 60 (IntegerLiteral -> INTEGER .)
    PLUS            reduce using rule 60 (IntegerLiteral -> INTEGER .)
    MINUS           reduce using rule 60 (IntegerLiteral -> INTEGER .)
    TIMES           reduce using rule 60 (IntegerLiteral -> INTEGER .)
    DIVIDE          reduce using rule 60 (IntegerLiteral -> INTEGER .)
    MODULO          reduce using rule 60 (IntegerLiteral -> INTEGER .)
    LOR             reduce using rule 60 (IntegerLiteral -> INTEGER .)
    LAND            reduce using rule 60 (IntegerLiteral -> INTEGER .)
    LT              reduce using rule 60 (IntegerLiteral -> INTEGER .)
    LE              reduce using rule 60 (IntegerLiteral -> INTEGER .)
    GT              reduce using rule 60 (IntegerLiteral -> INTEGER .)
    GE              reduce using rule 60 (IntegerLiteral -> INTEGER .)
    EQ              reduce using rule 60 (IntegerLiteral -> INTEGER .)
    NE              reduce using rule 60 (IntegerLiteral -> INTEGER .)
    EQUALS          reduce using rule 60 (IntegerLiteral -> INTEGER .)
    PUSH            reduce using rule 60 (IntegerLiteral -> INTEGER .)
    POP             reduce using rule 60 (IntegerLiteral -> INTEGER .)
    RPAREN          reduce using rule 60 (IntegerLiteral -> INTEGER .)
    RBRACKET        reduce using rule 60 (IntegerLiteral -> INTEGER .)
    COMMA           reduce using rule 60 (IntegerLiteral -> INTEGER .)
    RBRACE          reduce using rule 60 (IntegerLiteral -> INTEGER .)


state 83

    (61) FloatLiteral -> FLOAT .

    SEMI            reduce using rule 61 (FloatLiteral -> FLOAT .)
    PERIOD          reduce using rule 61 (FloatLiteral -> FLOAT .)
    LBRACKET        reduce using rule 61 (FloatLiteral -> FLOAT .)
    PLUS            reduce using rule 61 (FloatLiteral -> FLOAT .)
    MINUS           reduce using rule 61 (FloatLiteral -> FLOAT .)
    TIMES           reduce using rule 61 (FloatLiteral -> FLOAT .)
    DIVIDE          reduce using rule 61 (FloatLiteral -> FLOAT .)
    MODULO          reduce using rule 61 (FloatLiteral -> FLOAT .)
    LOR             reduce using rule 61 (FloatLiteral -> FLOAT .)
    LAND            reduce using rule 61 (FloatLiteral -> FLOAT .)
    LT              reduce using rule 61 (FloatLiteral -> FLOAT .)
    LE              reduce using rule 61 (FloatLiteral -> FLOAT .)
    GT              reduce using rule 61 (FloatLiteral -> FLOAT .)
    GE              reduce using rule 61 (FloatLiteral -> FLOAT .)
    EQ              reduce using rule 61 (FloatLiteral -> FLOAT .)
    NE              reduce using rule 61 (FloatLiteral -> FLOAT .)
    EQUALS          reduce using rule 61 (FloatLiteral -> FLOAT .)
    PUSH            reduce using rule 61 (FloatLiteral -> FLOAT .)
    POP             reduce using rule 61 (FloatLiteral -> FLOAT .)
    RPAREN          reduce using rule 61 (FloatLiteral -> FLOAT .)
    RBRACKET        reduce using rule 61 (FloatLiteral -> FLOAT .)
    COMMA           reduce using rule 61 (FloatLiteral -> FLOAT .)
    RBRACE          reduce using rule 61 (FloatLiteral -> FLOAT .)


state 84

    (62) StringLiteral -> STRING .

    SEMI            reduce using rule 62 (StringLiteral -> STRING .)
    PERIOD          reduce using rule 62 (StringLiteral -> STRING .)
    LBRACKET        reduce using rule 62 (StringLiteral -> STRING .)
    PLUS            reduce using rule 62 (StringLiteral -> STRING .)
    MINUS           reduce using rule 62 (StringLiteral -> STRING .)
    TIMES           reduce using rule 62 (StringLiteral -> STRING .)
    DIVIDE          reduce using rule 62 (StringLiteral -> STRING .)
    MODULO          reduce using rule 62 (StringLiteral -> STRING .)
    LOR             reduce using rule 62 (StringLiteral -> STRING .)
    LAND            reduce using rule 62 (StringLiteral -> STRING .)
    LT              reduce using rule 62 (StringLiteral -> STRING .)
    LE              reduce using rule 62 (StringLiteral -> STRING .)
    GT              reduce using rule 62 (StringLiteral -> STRING .)
    GE              reduce using rule 62 (StringLiteral -> STRING .)
    EQ              reduce using rule 62 (StringLiteral -> STRING .)
    NE              reduce using rule 62 (StringLiteral -> STRING .)
    EQUALS          reduce using rule 62 (StringLiteral -> STRING .)
    PUSH            reduce using rule 62 (StringLiteral -> STRING .)
    POP             reduce using rule 62 (StringLiteral -> STRING .)
    RPAREN          reduce using rule 62 (StringLiteral -> STRING .)
    RBRACKET        reduce using rule 62 (StringLiteral -> STRING .)
    COMMA           reduce using rule 62 (StringLiteral -> STRING .)
    RBRACE          reduce using rule 62 (StringLiteral -> STRING .)


state 85

    (63) BooleanLiteral -> TRUE .

    SEMI            reduce using rule 63 (BooleanLiteral -> TRUE .)
    PERIOD          reduce using rule 63 (BooleanLiteral -> TRUE .)
    LBRACKET        reduce using rule 63 (BooleanLiteral -> TRUE .)
    PLUS            reduce using rule 63 (BooleanLiteral -> TRUE .)
    MINUS           reduce using rule 63 (BooleanLiteral -> TRUE .)
    TIMES           reduce using rule 63 (BooleanLiteral -> TRUE .)
    DIVIDE          reduce using rule 63 (BooleanLiteral -> TRUE .)
    MODULO          reduce using rule 63 (BooleanLiteral -> TRUE .)
    LOR             reduce using rule 63 (BooleanLiteral -> TRUE .)
    LAND            reduce using rule 63 (BooleanLiteral -> TRUE .)
    LT              reduce using rule 63 (BooleanLiteral -> TRUE .)
    LE              reduce using rule 63 (BooleanLiteral -> TRUE .)
    GT              reduce using rule 63 (BooleanLiteral -> TRUE .)
    GE              reduce using rule 63 (BooleanLiteral -> TRUE .)
    EQ              reduce using rule 63 (BooleanLiteral -> TRUE .)
    NE              reduce using rule 63 (BooleanLiteral -> TRUE .)
    EQUALS          reduce using rule 63 (BooleanLiteral -> TRUE .)
    PUSH            reduce using rule 63 (BooleanLiteral -> TRUE .)
    POP             reduce using rule 63 (BooleanLiteral -> TRUE .)
    RPAREN          reduce using rule 63 (BooleanLiteral -> TRUE .)
    RBRACKET        reduce using rule 63 (BooleanLiteral -> TRUE .)
    COMMA           reduce using rule 63 (BooleanLiteral -> TRUE .)
    RBRACE          reduce using rule 63 (BooleanLiteral -> TRUE .)


state 86

    (64) BooleanLiteral -> FALSE .

    SEMI            reduce using rule 64 (BooleanLiteral -> FALSE .)
    PERIOD          reduce using rule 64 (BooleanLiteral -> FALSE .)
    LBRACKET        reduce using rule 64 (BooleanLiteral -> FALSE .)
    PLUS            reduce using rule 64 (BooleanLiteral -> FALSE .)
    MINUS           reduce using rule 64 (BooleanLiteral -> FALSE .)
    TIMES           reduce using rule 64 (BooleanLiteral -> FALSE .)
    DIVIDE          reduce using rule 64 (BooleanLiteral -> FALSE .)
    MODULO          reduce using rule 64 (BooleanLiteral -> FALSE .)
    LOR             reduce using rule 64 (BooleanLiteral -> FALSE .)
    LAND            reduce using rule 64 (BooleanLiteral -> FALSE .)
    LT              reduce using rule 64 (BooleanLiteral -> FALSE .)
    LE              reduce using rule 64 (BooleanLiteral -> FALSE .)
    GT              reduce using rule 64 (BooleanLiteral -> FALSE .)
    GE              reduce using rule 64 (BooleanLiteral -> FALSE .)
    EQ              reduce using rule 64 (BooleanLiteral -> FALSE .)
    NE              reduce using rule 64 (BooleanLiteral -> FALSE .)
    EQUALS          reduce using rule 64 (BooleanLiteral -> FALSE .)
    PUSH            reduce using rule 64 (BooleanLiteral -> FALSE .)
    POP             reduce using rule 64 (BooleanLiteral -> FALSE .)
    RPAREN          reduce using rule 64 (BooleanLiteral -> FALSE .)
    RBRACKET        reduce using rule 64 (BooleanLiteral -> FALSE .)
    COMMA           reduce using rule 64 (BooleanLiteral -> FALSE .)
    RBRACE          reduce using rule 64 (BooleanLiteral -> FALSE .)


state 87

    (65) NullLiteral -> NULL .

    SEMI            reduce using rule 65 (NullLiteral -> NULL .)
    PERIOD          reduce using rule 65 (NullLiteral -> NULL .)
    LBRACKET        reduce using rule 65 (NullLiteral -> NULL .)
    PLUS            reduce using rule 65 (NullLiteral -> NULL .)
    MINUS           reduce using rule 65 (NullLiteral -> NULL .)
    TIMES           reduce using rule 65 (NullLiteral -> NULL .)
    DIVIDE          reduce using rule 65 (NullLiteral -> NULL .)
    MODULO          reduce using rule 65 (NullLiteral -> NULL .)
    LOR             reduce using rule 65 (NullLiteral -> NULL .)
    LAND            reduce using rule 65 (NullLiteral -> NULL .)
    LT              reduce using rule 65 (NullLiteral -> NULL .)
    LE              reduce using rule 65 (NullLiteral -> NULL .)
    GT              reduce using rule 65 (NullLiteral -> NULL .)
    GE              reduce using rule 65 (NullLiteral -> NULL .)
    EQ              reduce using rule 65 (NullLiteral -> NULL .)
    NE              reduce using rule 65 (NullLiteral -> NULL .)
    EQUALS          reduce using rule 65 (NullLiteral -> NULL .)
    PUSH            reduce using rule 65 (NullLiteral -> NULL .)
    POP             reduce using rule 65 (NullLiteral -> NULL .)
    RPAREN          reduce using rule 65 (NullLiteral -> NULL .)
    RBRACKET        reduce using rule 65 (NullLiteral -> NULL .)
    COMMA           reduce using rule 65 (NullLiteral -> NULL .)
    RBRACE          reduce using rule 65 (NullLiteral -> NULL .)


state 88

    (21) Block -> LBRACE StatementsOpt RBRACE .

    STRUCT          reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    IDENT           reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    $end            reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    ELSE            reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    IF              reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    WHILE           reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    FOR             reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    BREAK           reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    CONTINUE        reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    RETURN          reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    LPAREN          reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    NEW             reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    PLUS            reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    MINUS           reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    LNOT            reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    INCREMENT       reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    DECREMENT       reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    ID              reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    INTEGER         reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    FLOAT           reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    STRING          reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    TRUE            reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    FALSE           reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    NULL            reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)
    RBRACE          reduce using rule 21 (Block -> LBRACE StatementsOpt RBRACE .)


state 89

    (25) Statements -> Statements Statement .

    IF              reduce using rule 25 (Statements -> Statements Statement .)
    WHILE           reduce using rule 25 (Statements -> Statements Statement .)
    FOR             reduce using rule 25 (Statements -> Statements Statement .)
    BREAK           reduce using rule 25 (Statements -> Statements Statement .)
    CONTINUE        reduce using rule 25 (Statements -> Statements Statement .)
    RETURN          reduce using rule 25 (Statements -> Statements Statement .)
    LPAREN          reduce using rule 25 (Statements -> Statements Statement .)
    NEW             reduce using rule 25 (Statements -> Statements Statement .)
    PLUS            reduce using rule 25 (Statements -> Statements Statement .)
    MINUS           reduce using rule 25 (Statements -> Statements Statement .)
    LNOT            reduce using rule 25 (Statements -> Statements Statement .)
    INCREMENT       reduce using rule 25 (Statements -> Statements Statement .)
    DECREMENT       reduce using rule 25 (Statements -> Statements Statement .)
    ID              reduce using rule 25 (Statements -> Statements Statement .)
    INTEGER         reduce using rule 25 (Statements -> Statements Statement .)
    FLOAT           reduce using rule 25 (Statements -> Statements Statement .)
    STRING          reduce using rule 25 (Statements -> Statements Statement .)
    TRUE            reduce using rule 25 (Statements -> Statements Statement .)
    FALSE           reduce using rule 25 (Statements -> Statements Statement .)
    NULL            reduce using rule 25 (Statements -> Statements Statement .)
    IDENT           reduce using rule 25 (Statements -> Statements Statement .)
    RBRACE          reduce using rule 25 (Statements -> Statements Statement .)


state 90

    (33) IfStatement -> IF LPAREN . Expression RPAREN Block ElseOpt
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 125
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 91

    (67) ParenthesizedExpression -> LPAREN Expression . RPAREN
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    RPAREN          shift and go to state 126
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 92

    (43) ExpressionStatement -> Expression SEMI .

    IF              reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    WHILE           reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    FOR             reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    BREAK           reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    CONTINUE        reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    RETURN          reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    LPAREN          reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    NEW             reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    PLUS            reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    MINUS           reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    LNOT            reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    INCREMENT       reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    DECREMENT       reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    ID              reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    INTEGER         reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    FLOAT           reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    STRING          reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    TRUE            reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    FALSE           reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    NULL            reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    IDENT           reduce using rule 43 (ExpressionStatement -> Expression SEMI .)
    RBRACE          reduce using rule 43 (ExpressionStatement -> Expression SEMI .)


state 93

    (75) FieldAccessExpression -> Expression PERIOD . Name
    (14) Name -> . IDENT

    IDENT           shift and go to state 10

    Name                           shift and go to state 127

state 94

    (76) ArrayIndexExpression -> Expression LBRACKET . Expression RBRACKET
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 128
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 95

    (83) BinaryOperation -> Expression PLUS . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 129
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 96

    (84) BinaryOperation -> Expression MINUS . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 130
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 97

    (85) BinaryOperation -> Expression TIMES . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 131
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 98

    (86) BinaryOperation -> Expression DIVIDE . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 132
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 99

    (87) BinaryOperation -> Expression MODULO . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 133
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 100

    (88) BinaryOperation -> Expression LOR . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 134
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 101

    (89) BinaryOperation -> Expression LAND . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 135
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 102

    (90) BinaryOperation -> Expression LT . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 136
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 103

    (91) BinaryOperation -> Expression LE . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 137
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 104

    (92) BinaryOperation -> Expression GT . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 138
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 105

    (93) BinaryOperation -> Expression GE . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 139
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 106

    (94) BinaryOperation -> Expression EQ . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 140
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 107

    (95) BinaryOperation -> Expression NE . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 141
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 108

    (96) BinaryOperation -> Expression EQUALS . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 142
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 109

    (97) BinaryOperation -> Expression PUSH . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 143
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 110

    (98) BinaryOperation -> Expression POP . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 144
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 111

    (37) WhileStatement -> WHILE LPAREN . Expression RPAREN Block
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 145
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 112

    (38) ForStatement -> FOR LPAREN . ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block
    (53) ExpressionOpt -> . Expression
    (54) ExpressionOpt -> . empty
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (99) empty -> .
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    SEMI            reduce using rule 99 (empty -> .)
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    ExpressionOpt                  shift and go to state 146
    Expression                     shift and go to state 147
    empty                          shift and go to state 148
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 113

    (39) BreakStatement -> BREAK SEMI .

    IF              reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    WHILE           reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    FOR             reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    BREAK           reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    CONTINUE        reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    RETURN          reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    LPAREN          reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    NEW             reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    PLUS            reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    MINUS           reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    LNOT            reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    INCREMENT       reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    DECREMENT       reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    ID              reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    INTEGER         reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    FLOAT           reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    STRING          reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    TRUE            reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    FALSE           reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    NULL            reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    IDENT           reduce using rule 39 (BreakStatement -> BREAK SEMI .)
    RBRACE          reduce using rule 39 (BreakStatement -> BREAK SEMI .)


state 114

    (40) ContinueStatement -> CONTINUE SEMI .

    IF              reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    WHILE           reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    FOR             reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    BREAK           reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    RETURN          reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    NEW             reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    PLUS            reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    MINUS           reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    LNOT            reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    INCREMENT       reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    DECREMENT       reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    ID              reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    INTEGER         reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    STRING          reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    TRUE            reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    FALSE           reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    NULL            reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    IDENT           reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 40 (ContinueStatement -> CONTINUE SEMI .)


state 115

    (41) ReturnStatement -> RETURN Expression . SEMI
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            shift and go to state 149
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 116

    (42) ReturnStatement -> RETURN SEMI .

    IF              reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    WHILE           reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    FOR             reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    BREAK           reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    CONTINUE        reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    RETURN          reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    LPAREN          reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    NEW             reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    PLUS            reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    MINUS           reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    LNOT            reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    INCREMENT       reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    DECREMENT       reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    ID              reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    INTEGER         reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    FLOAT           reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    STRING          reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    TRUE            reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    FALSE           reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    NULL            reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    IDENT           reduce using rule 42 (ReturnStatement -> RETURN SEMI .)
    RBRACE          reduce using rule 42 (ReturnStatement -> RETURN SEMI .)


state 117

    (68) CallExpression -> Name LPAREN . ArgumentsOpt RPAREN
    (69) ArgumentsOpt -> . Arguments
    (70) ArgumentsOpt -> . empty
    (71) Arguments -> . Expression
    (72) Arguments -> . Arguments COMMA Expression
    (99) empty -> .
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    RPAREN          reduce using rule 99 (empty -> .)
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Name                           shift and go to state 74
    ArgumentsOpt                   shift and go to state 150
    Arguments                      shift and go to state 151
    empty                          shift and go to state 152
    Expression                     shift and go to state 153
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73

state 118

    (73) NewExpression -> NEW Type . LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> NEW Type . LBRACE ArgumentsOpt RBRACE
    (13) Type -> Type . LBRACKET RBRACKET

    LPAREN          shift and go to state 154
    LBRACE          shift and go to state 155
    LBRACKET        shift and go to state 12


state 119

    (77) UnaryPrefixOperation -> PLUS Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    PLUS            reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    MINUS           reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    TIMES           reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    DIVIDE          reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    MODULO          reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    LOR             reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    LAND            reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    LT              reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    LE              reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    GT              reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    GE              reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    EQ              reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    NE              reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    EQUALS          reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    PUSH            reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    POP             reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    RPAREN          reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    RBRACKET        reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    COMMA           reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    RBRACE          reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .) ]
  ! LBRACKET        [ reduce using rule 77 (UnaryPrefixOperation -> PLUS Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 120

    (78) UnaryPrefixOperation -> MINUS Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    PLUS            reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    MINUS           reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    TIMES           reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    DIVIDE          reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    MODULO          reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    LOR             reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    LAND            reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    LT              reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    LE              reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    GT              reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    GE              reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    EQ              reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    NE              reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    EQUALS          reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    PUSH            reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    POP             reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    RPAREN          reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    RBRACKET        reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    COMMA           reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    RBRACE          reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .) ]
  ! LBRACKET        [ reduce using rule 78 (UnaryPrefixOperation -> MINUS Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 121

    (79) UnaryPrefixOperation -> LNOT Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    PLUS            reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    MINUS           reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    TIMES           reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    DIVIDE          reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    MODULO          reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    LOR             reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    LAND            reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    LT              reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    LE              reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    GT              reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    GE              reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    EQ              reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    NE              reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    EQUALS          reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    PUSH            reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    POP             reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    RPAREN          reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    RBRACKET        reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    COMMA           reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    RBRACE          reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .) ]
  ! LBRACKET        [ reduce using rule 79 (UnaryPrefixOperation -> LNOT Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 122

    (80) UnaryPrefixOperation -> INCREMENT Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    PLUS            reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    MINUS           reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    TIMES           reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    DIVIDE          reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    MODULO          reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    LOR             reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    LAND            reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    LT              reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    LE              reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    GT              reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    GE              reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    EQ              reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    NE              reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    EQUALS          reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    PUSH            reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    POP             reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    RPAREN          reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    RBRACKET        reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    COMMA           reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    RBRACE          reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .) ]
  ! LBRACKET        [ reduce using rule 80 (UnaryPrefixOperation -> INCREMENT Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 123

    (81) UnaryPrefixOperation -> DECREMENT Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    PLUS            reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    MINUS           reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    TIMES           reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    DIVIDE          reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    MODULO          reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    LOR             reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    LAND            reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    LT              reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    LE              reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    GT              reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    GE              reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    EQ              reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    NE              reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    EQUALS          reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    PUSH            reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    POP             reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    RPAREN          reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    RBRACKET        reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    COMMA           reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    RBRACE          reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .) ]
  ! LBRACKET        [ reduce using rule 81 (UnaryPrefixOperation -> DECREMENT Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 124

    (82) UnaryPrefixOperation -> ID Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    PLUS            reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    MINUS           reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    TIMES           reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    DIVIDE          reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    MODULO          reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    LOR             reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    LAND            reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    LT              reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    LE              reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    GT              reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    GE              reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    EQ              reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    NE              reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    EQUALS          reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    PUSH            reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    POP             reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    RPAREN          reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    RBRACKET        reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    COMMA           reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    RBRACE          reduce using rule 82 (UnaryPrefixOperation -> ID Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 82 (UnaryPrefixOperation -> ID Expression .) ]
  ! LBRACKET        [ reduce using rule 82 (UnaryPrefixOperation -> ID Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 125

    (33) IfStatement -> IF LPAREN Expression . RPAREN Block ElseOpt
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    RPAREN          shift and go to state 156
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 126

    (67) ParenthesizedExpression -> LPAREN Expression RPAREN .

    SEMI            reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    PERIOD          reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    LBRACKET        reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    TIMES           reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    DIVIDE          reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    MODULO          reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    LOR             reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    LAND            reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    LT              reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    LE              reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    GT              reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    GE              reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    EQ              reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    NE              reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    EQUALS          reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    PUSH            reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    POP             reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 67 (ParenthesizedExpression -> LPAREN Expression RPAREN .)


state 127

    (75) FieldAccessExpression -> Expression PERIOD Name .

    SEMI            reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    PERIOD          reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    LBRACKET        reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    PLUS            reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    MINUS           reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    TIMES           reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    DIVIDE          reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    MODULO          reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    LOR             reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    LAND            reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    LT              reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    LE              reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    GT              reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    GE              reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    EQ              reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    NE              reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    EQUALS          reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    PUSH            reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    POP             reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    RPAREN          reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    RBRACKET        reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    COMMA           reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)
    RBRACE          reduce using rule 75 (FieldAccessExpression -> Expression PERIOD Name .)


state 128

    (76) ArrayIndexExpression -> Expression LBRACKET Expression . RBRACKET
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    RBRACKET        shift and go to state 157
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 129

    (83) BinaryOperation -> Expression PLUS Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    PLUS            reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    MINUS           reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    LOR             reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    LAND            reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    LT              reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    LE              reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    GT              reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    GE              reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    EQ              reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    NE              reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    EQUALS          reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    PUSH            reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    POP             reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    RPAREN          reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    RBRACKET        reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    COMMA           reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    RBRACE          reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99

  ! PERIOD          [ reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .) ]
  ! LBRACKET        [ reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .) ]
  ! TIMES           [ reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .) ]
  ! DIVIDE          [ reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .) ]
  ! MODULO          [ reduce using rule 83 (BinaryOperation -> Expression PLUS Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 130

    (84) BinaryOperation -> Expression MINUS Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    PLUS            reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    MINUS           reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    LOR             reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    LAND            reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    LT              reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    LE              reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    GT              reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    GE              reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    EQ              reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    NE              reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    EQUALS          reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    PUSH            reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    POP             reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    RPAREN          reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    RBRACKET        reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    COMMA           reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    RBRACE          reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99

  ! PERIOD          [ reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .) ]
  ! LBRACKET        [ reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .) ]
  ! TIMES           [ reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .) ]
  ! DIVIDE          [ reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .) ]
  ! MODULO          [ reduce using rule 84 (BinaryOperation -> Expression MINUS Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 131

    (85) BinaryOperation -> Expression TIMES Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    PLUS            reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    MINUS           reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    TIMES           reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    DIVIDE          reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    MODULO          reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    LOR             reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    LAND            reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    LT              reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    LE              reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    GT              reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    GE              reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    EQ              reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    NE              reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    EQUALS          reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    PUSH            reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    POP             reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    RPAREN          reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    RBRACKET        reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    COMMA           reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    RBRACE          reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .) ]
  ! LBRACKET        [ reduce using rule 85 (BinaryOperation -> Expression TIMES Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 132

    (86) BinaryOperation -> Expression DIVIDE Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    PLUS            reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    MINUS           reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    TIMES           reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    DIVIDE          reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    MODULO          reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    LOR             reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    LAND            reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    LT              reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    LE              reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    GT              reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    GE              reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    EQ              reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    NE              reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    EQUALS          reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    PUSH            reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    POP             reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    RPAREN          reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    RBRACKET        reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    COMMA           reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    RBRACE          reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .) ]
  ! LBRACKET        [ reduce using rule 86 (BinaryOperation -> Expression DIVIDE Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 133

    (87) BinaryOperation -> Expression MODULO Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    PLUS            reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    MINUS           reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    TIMES           reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    DIVIDE          reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    MODULO          reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    LOR             reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    LAND            reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    LT              reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    LE              reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    GT              reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    GE              reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    EQ              reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    NE              reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    EQUALS          reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    PUSH            reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    POP             reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    RPAREN          reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    RBRACKET        reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    COMMA           reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    RBRACE          reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94

  ! PERIOD          [ reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .) ]
  ! LBRACKET        [ reduce using rule 87 (BinaryOperation -> Expression MODULO Expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 96 ]
  ! TIMES           [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MODULO          [ shift and go to state 99 ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 134

    (88) BinaryOperation -> Expression LOR Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    LOR             reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    EQUALS          reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    PUSH            reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    POP             reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    RPAREN          reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    RBRACKET        reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    COMMA           reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    RBRACE          reduce using rule 88 (BinaryOperation -> Expression LOR Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107

  ! PERIOD          [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! LBRACKET        [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! PLUS            [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! MINUS           [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! TIMES           [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! DIVIDE          [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! MODULO          [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! LAND            [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! LT              [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! LE              [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! GT              [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! GE              [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! EQ              [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! NE              [ reduce using rule 88 (BinaryOperation -> Expression LOR Expression .) ]
  ! LOR             [ shift and go to state 100 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 135

    (89) BinaryOperation -> Expression LAND Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    LOR             reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    LAND            reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    EQUALS          reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    PUSH            reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    POP             reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    RPAREN          reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    RBRACKET        reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    COMMA           reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    RBRACE          reduce using rule 89 (BinaryOperation -> Expression LAND Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107

  ! PERIOD          [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! LBRACKET        [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! PLUS            [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! MINUS           [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! TIMES           [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! DIVIDE          [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! MODULO          [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! LT              [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! LE              [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! GT              [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! GE              [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! EQ              [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! NE              [ reduce using rule 89 (BinaryOperation -> Expression LAND Expression .) ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 136

    (90) BinaryOperation -> Expression LT Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    LOR             reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    LAND            reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    LT              reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    LE              reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    GT              reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    GE              reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    EQ              reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    NE              reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    EQUALS          reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    PUSH            reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    POP             reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    RPAREN          reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    RBRACKET        reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    COMMA           reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    RBRACE          reduce using rule 90 (BinaryOperation -> Expression LT Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99

  ! PERIOD          [ reduce using rule 90 (BinaryOperation -> Expression LT Expression .) ]
  ! LBRACKET        [ reduce using rule 90 (BinaryOperation -> Expression LT Expression .) ]
  ! PLUS            [ reduce using rule 90 (BinaryOperation -> Expression LT Expression .) ]
  ! MINUS           [ reduce using rule 90 (BinaryOperation -> Expression LT Expression .) ]
  ! TIMES           [ reduce using rule 90 (BinaryOperation -> Expression LT Expression .) ]
  ! DIVIDE          [ reduce using rule 90 (BinaryOperation -> Expression LT Expression .) ]
  ! MODULO          [ reduce using rule 90 (BinaryOperation -> Expression LT Expression .) ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 137

    (91) BinaryOperation -> Expression LE Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    LOR             reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    LAND            reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    LT              reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    LE              reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    GT              reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    GE              reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    EQ              reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    NE              reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    EQUALS          reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    PUSH            reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    POP             reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    RPAREN          reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    RBRACKET        reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    COMMA           reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    RBRACE          reduce using rule 91 (BinaryOperation -> Expression LE Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99

  ! PERIOD          [ reduce using rule 91 (BinaryOperation -> Expression LE Expression .) ]
  ! LBRACKET        [ reduce using rule 91 (BinaryOperation -> Expression LE Expression .) ]
  ! PLUS            [ reduce using rule 91 (BinaryOperation -> Expression LE Expression .) ]
  ! MINUS           [ reduce using rule 91 (BinaryOperation -> Expression LE Expression .) ]
  ! TIMES           [ reduce using rule 91 (BinaryOperation -> Expression LE Expression .) ]
  ! DIVIDE          [ reduce using rule 91 (BinaryOperation -> Expression LE Expression .) ]
  ! MODULO          [ reduce using rule 91 (BinaryOperation -> Expression LE Expression .) ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 138

    (92) BinaryOperation -> Expression GT Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    LOR             reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    LAND            reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    LT              reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    LE              reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    GT              reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    GE              reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    EQ              reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    NE              reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    EQUALS          reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    PUSH            reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    POP             reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    RPAREN          reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    RBRACKET        reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    COMMA           reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    RBRACE          reduce using rule 92 (BinaryOperation -> Expression GT Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99

  ! PERIOD          [ reduce using rule 92 (BinaryOperation -> Expression GT Expression .) ]
  ! LBRACKET        [ reduce using rule 92 (BinaryOperation -> Expression GT Expression .) ]
  ! PLUS            [ reduce using rule 92 (BinaryOperation -> Expression GT Expression .) ]
  ! MINUS           [ reduce using rule 92 (BinaryOperation -> Expression GT Expression .) ]
  ! TIMES           [ reduce using rule 92 (BinaryOperation -> Expression GT Expression .) ]
  ! DIVIDE          [ reduce using rule 92 (BinaryOperation -> Expression GT Expression .) ]
  ! MODULO          [ reduce using rule 92 (BinaryOperation -> Expression GT Expression .) ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 139

    (93) BinaryOperation -> Expression GE Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    LOR             reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    LAND            reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    LT              reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    LE              reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    GT              reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    GE              reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    EQ              reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    NE              reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    EQUALS          reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    PUSH            reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    POP             reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    RPAREN          reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    RBRACKET        reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    COMMA           reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    RBRACE          reduce using rule 93 (BinaryOperation -> Expression GE Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99

  ! PERIOD          [ reduce using rule 93 (BinaryOperation -> Expression GE Expression .) ]
  ! LBRACKET        [ reduce using rule 93 (BinaryOperation -> Expression GE Expression .) ]
  ! PLUS            [ reduce using rule 93 (BinaryOperation -> Expression GE Expression .) ]
  ! MINUS           [ reduce using rule 93 (BinaryOperation -> Expression GE Expression .) ]
  ! TIMES           [ reduce using rule 93 (BinaryOperation -> Expression GE Expression .) ]
  ! DIVIDE          [ reduce using rule 93 (BinaryOperation -> Expression GE Expression .) ]
  ! MODULO          [ reduce using rule 93 (BinaryOperation -> Expression GE Expression .) ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! LT              [ shift and go to state 102 ]
  ! LE              [ shift and go to state 103 ]
  ! GT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 105 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 140

    (94) BinaryOperation -> Expression EQ Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    LOR             reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    LAND            reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    EQ              reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    NE              reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    EQUALS          reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    PUSH            reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    POP             reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    RPAREN          reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    RBRACKET        reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    COMMA           reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    RBRACE          reduce using rule 94 (BinaryOperation -> Expression EQ Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105

  ! PERIOD          [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! LBRACKET        [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! PLUS            [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! MINUS           [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! TIMES           [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! DIVIDE          [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! MODULO          [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! LT              [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! LE              [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! GT              [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! GE              [ reduce using rule 94 (BinaryOperation -> Expression EQ Expression .) ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 141

    (95) BinaryOperation -> Expression NE Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    LOR             reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    LAND            reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    EQ              reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    NE              reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    EQUALS          reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    PUSH            reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    POP             reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    RPAREN          reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    RBRACKET        reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    COMMA           reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    RBRACE          reduce using rule 95 (BinaryOperation -> Expression NE Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105

  ! PERIOD          [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! LBRACKET        [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! PLUS            [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! MINUS           [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! TIMES           [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! DIVIDE          [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! MODULO          [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! LT              [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! LE              [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! GT              [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! GE              [ reduce using rule 95 (BinaryOperation -> Expression NE Expression .) ]
  ! LOR             [ shift and go to state 100 ]
  ! LAND            [ shift and go to state 101 ]
  ! EQ              [ shift and go to state 106 ]
  ! NE              [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 142

    (96) BinaryOperation -> Expression EQUALS Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .)
    PUSH            reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .)
    POP             reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .)
    RPAREN          reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .)
    RBRACKET        reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .)
    COMMA           reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .)
    RBRACE          reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108

  ! PERIOD          [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! LBRACKET        [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! PLUS            [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! MINUS           [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! TIMES           [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! DIVIDE          [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! MODULO          [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! LOR             [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! LAND            [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! LT              [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! LE              [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! GT              [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! GE              [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! EQ              [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! NE              [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! EQUALS          [ reduce using rule 96 (BinaryOperation -> Expression EQUALS Expression .) ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 143

    (97) BinaryOperation -> Expression PUSH Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .)
    PUSH            reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .)
    POP             reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .)
    RPAREN          reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .)
    RBRACKET        reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .)
    COMMA           reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .)
    RBRACE          reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108

  ! PERIOD          [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! LBRACKET        [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! PLUS            [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! MINUS           [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! TIMES           [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! DIVIDE          [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! MODULO          [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! LOR             [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! LAND            [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! LT              [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! LE              [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! GT              [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! GE              [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! EQ              [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! NE              [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! EQUALS          [ reduce using rule 97 (BinaryOperation -> Expression PUSH Expression .) ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 144

    (98) BinaryOperation -> Expression POP Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 98 (BinaryOperation -> Expression POP Expression .)
    PUSH            reduce using rule 98 (BinaryOperation -> Expression POP Expression .)
    POP             reduce using rule 98 (BinaryOperation -> Expression POP Expression .)
    RPAREN          reduce using rule 98 (BinaryOperation -> Expression POP Expression .)
    RBRACKET        reduce using rule 98 (BinaryOperation -> Expression POP Expression .)
    COMMA           reduce using rule 98 (BinaryOperation -> Expression POP Expression .)
    RBRACE          reduce using rule 98 (BinaryOperation -> Expression POP Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108

  ! PERIOD          [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! LBRACKET        [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! PLUS            [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! MINUS           [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! TIMES           [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! DIVIDE          [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! MODULO          [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! LOR             [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! LAND            [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! LT              [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! LE              [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! GT              [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! GE              [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! EQ              [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! NE              [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! EQUALS          [ reduce using rule 98 (BinaryOperation -> Expression POP Expression .) ]
  ! PUSH            [ shift and go to state 109 ]
  ! POP             [ shift and go to state 110 ]


state 145

    (37) WhileStatement -> WHILE LPAREN Expression . RPAREN Block
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    RPAREN          shift and go to state 158
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 146

    (38) ForStatement -> FOR LPAREN ExpressionOpt . SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block

    SEMI            shift and go to state 159


state 147

    (53) ExpressionOpt -> Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    SEMI            reduce using rule 53 (ExpressionOpt -> Expression .)
    RPAREN          reduce using rule 53 (ExpressionOpt -> Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 148

    (54) ExpressionOpt -> empty .

    SEMI            reduce using rule 54 (ExpressionOpt -> empty .)
    RPAREN          reduce using rule 54 (ExpressionOpt -> empty .)


state 149

    (41) ReturnStatement -> RETURN Expression SEMI .

    IF              reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    WHILE           reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    FOR             reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    BREAK           reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    CONTINUE        reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    RETURN          reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    LPAREN          reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    NEW             reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    PLUS            reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    MINUS           reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    LNOT            reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    INCREMENT       reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    DECREMENT       reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    ID              reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    INTEGER         reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    FLOAT           reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    STRING          reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    TRUE            reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    FALSE           reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    NULL            reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    IDENT           reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)
    RBRACE          reduce using rule 41 (ReturnStatement -> RETURN Expression SEMI .)


state 150

    (68) CallExpression -> Name LPAREN ArgumentsOpt . RPAREN

    RPAREN          shift and go to state 160


state 151

    (69) ArgumentsOpt -> Arguments .
    (72) Arguments -> Arguments . COMMA Expression

    RPAREN          reduce using rule 69 (ArgumentsOpt -> Arguments .)
    RBRACE          reduce using rule 69 (ArgumentsOpt -> Arguments .)
    COMMA           shift and go to state 161


state 152

    (70) ArgumentsOpt -> empty .

    RPAREN          reduce using rule 70 (ArgumentsOpt -> empty .)
    RBRACE          reduce using rule 70 (ArgumentsOpt -> empty .)


state 153

    (71) Arguments -> Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    COMMA           reduce using rule 71 (Arguments -> Expression .)
    RPAREN          reduce using rule 71 (Arguments -> Expression .)
    RBRACE          reduce using rule 71 (Arguments -> Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 154

    (73) NewExpression -> NEW Type LPAREN . ArgumentsOpt RPAREN
    (69) ArgumentsOpt -> . Arguments
    (70) ArgumentsOpt -> . empty
    (71) Arguments -> . Expression
    (72) Arguments -> . Arguments COMMA Expression
    (99) empty -> .
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    RPAREN          reduce using rule 99 (empty -> .)
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    ArgumentsOpt                   shift and go to state 162
    Arguments                      shift and go to state 151
    empty                          shift and go to state 152
    Expression                     shift and go to state 153
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 155

    (74) NewExpression -> NEW Type LBRACE . ArgumentsOpt RBRACE
    (69) ArgumentsOpt -> . Arguments
    (70) ArgumentsOpt -> . empty
    (71) Arguments -> . Expression
    (72) Arguments -> . Arguments COMMA Expression
    (99) empty -> .
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    RBRACE          reduce using rule 99 (empty -> .)
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    ArgumentsOpt                   shift and go to state 163
    Arguments                      shift and go to state 151
    empty                          shift and go to state 152
    Expression                     shift and go to state 153
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 156

    (33) IfStatement -> IF LPAREN Expression RPAREN . Block ElseOpt
    (21) Block -> . LBRACE StatementsOpt RBRACE

    LBRACE          shift and go to state 40

    Block                          shift and go to state 164

state 157

    (76) ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .

    SEMI            reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    PERIOD          reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    LBRACKET        reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    PLUS            reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    MINUS           reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    TIMES           reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    DIVIDE          reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    MODULO          reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    LOR             reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    LAND            reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    LT              reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    LE              reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    GT              reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    GE              reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    EQ              reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    NE              reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    EQUALS          reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    PUSH            reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    POP             reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    RPAREN          reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    RBRACKET        reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    COMMA           reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)
    RBRACE          reduce using rule 76 (ArrayIndexExpression -> Expression LBRACKET Expression RBRACKET .)


state 158

    (37) WhileStatement -> WHILE LPAREN Expression RPAREN . Block
    (21) Block -> . LBRACE StatementsOpt RBRACE

    LBRACE          shift and go to state 40

    Block                          shift and go to state 165

state 159

    (38) ForStatement -> FOR LPAREN ExpressionOpt SEMI . ExpressionOpt SEMI ExpressionOpt RPAREN Block
    (53) ExpressionOpt -> . Expression
    (54) ExpressionOpt -> . empty
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (99) empty -> .
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    SEMI            reduce using rule 99 (empty -> .)
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    ExpressionOpt                  shift and go to state 166
    Expression                     shift and go to state 147
    empty                          shift and go to state 148
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 160

    (68) CallExpression -> Name LPAREN ArgumentsOpt RPAREN .

    SEMI            reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    PERIOD          reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    LBRACKET        reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    PLUS            reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    MINUS           reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    TIMES           reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    DIVIDE          reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    MODULO          reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    LOR             reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    LAND            reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    LT              reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    LE              reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    GT              reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    GE              reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    EQ              reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    NE              reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    EQUALS          reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    PUSH            reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    POP             reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    RPAREN          reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    RBRACKET        reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    COMMA           reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)
    RBRACE          reduce using rule 68 (CallExpression -> Name LPAREN ArgumentsOpt RPAREN .)


state 161

    (72) Arguments -> Arguments COMMA . Expression
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    Expression                     shift and go to state 167
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 162

    (73) NewExpression -> NEW Type LPAREN ArgumentsOpt . RPAREN

    RPAREN          shift and go to state 168


state 163

    (74) NewExpression -> NEW Type LBRACE ArgumentsOpt . RBRACE

    RBRACE          shift and go to state 169


state 164

    (33) IfStatement -> IF LPAREN Expression RPAREN Block . ElseOpt
    (34) ElseOpt -> . ELSE Block
    (35) ElseOpt -> . ELSE IfStatement
    (36) ElseOpt -> . empty
    (99) empty -> .

    ELSE            shift and go to state 171
    IF              reduce using rule 99 (empty -> .)
    WHILE           reduce using rule 99 (empty -> .)
    FOR             reduce using rule 99 (empty -> .)
    BREAK           reduce using rule 99 (empty -> .)
    CONTINUE        reduce using rule 99 (empty -> .)
    RETURN          reduce using rule 99 (empty -> .)
    LPAREN          reduce using rule 99 (empty -> .)
    NEW             reduce using rule 99 (empty -> .)
    PLUS            reduce using rule 99 (empty -> .)
    MINUS           reduce using rule 99 (empty -> .)
    LNOT            reduce using rule 99 (empty -> .)
    INCREMENT       reduce using rule 99 (empty -> .)
    DECREMENT       reduce using rule 99 (empty -> .)
    ID              reduce using rule 99 (empty -> .)
    INTEGER         reduce using rule 99 (empty -> .)
    FLOAT           reduce using rule 99 (empty -> .)
    STRING          reduce using rule 99 (empty -> .)
    TRUE            reduce using rule 99 (empty -> .)
    FALSE           reduce using rule 99 (empty -> .)
    NULL            reduce using rule 99 (empty -> .)
    IDENT           reduce using rule 99 (empty -> .)
    RBRACE          reduce using rule 99 (empty -> .)

    ElseOpt                        shift and go to state 170
    empty                          shift and go to state 172

state 165

    (37) WhileStatement -> WHILE LPAREN Expression RPAREN Block .

    IF              reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    WHILE           reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    FOR             reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    BREAK           reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    CONTINUE        reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RETURN          reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LPAREN          reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    NEW             reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    PLUS            reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    MINUS           reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    LNOT            reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    INCREMENT       reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    DECREMENT       reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    ID              reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    INTEGER         reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    FLOAT           reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    STRING          reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    TRUE            reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    FALSE           reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    NULL            reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    IDENT           reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)
    RBRACE          reduce using rule 37 (WhileStatement -> WHILE LPAREN Expression RPAREN Block .)


state 166

    (38) ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt . SEMI ExpressionOpt RPAREN Block

    SEMI            shift and go to state 173


state 167

    (72) Arguments -> Arguments COMMA Expression .
    (75) FieldAccessExpression -> Expression . PERIOD Name
    (76) ArrayIndexExpression -> Expression . LBRACKET Expression RBRACKET
    (83) BinaryOperation -> Expression . PLUS Expression
    (84) BinaryOperation -> Expression . MINUS Expression
    (85) BinaryOperation -> Expression . TIMES Expression
    (86) BinaryOperation -> Expression . DIVIDE Expression
    (87) BinaryOperation -> Expression . MODULO Expression
    (88) BinaryOperation -> Expression . LOR Expression
    (89) BinaryOperation -> Expression . LAND Expression
    (90) BinaryOperation -> Expression . LT Expression
    (91) BinaryOperation -> Expression . LE Expression
    (92) BinaryOperation -> Expression . GT Expression
    (93) BinaryOperation -> Expression . GE Expression
    (94) BinaryOperation -> Expression . EQ Expression
    (95) BinaryOperation -> Expression . NE Expression
    (96) BinaryOperation -> Expression . EQUALS Expression
    (97) BinaryOperation -> Expression . PUSH Expression
    (98) BinaryOperation -> Expression . POP Expression

    COMMA           reduce using rule 72 (Arguments -> Arguments COMMA Expression .)
    RPAREN          reduce using rule 72 (Arguments -> Arguments COMMA Expression .)
    RBRACE          reduce using rule 72 (Arguments -> Arguments COMMA Expression .)
    PERIOD          shift and go to state 93
    LBRACKET        shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    MODULO          shift and go to state 99
    LOR             shift and go to state 100
    LAND            shift and go to state 101
    LT              shift and go to state 102
    LE              shift and go to state 103
    GT              shift and go to state 104
    GE              shift and go to state 105
    EQ              shift and go to state 106
    NE              shift and go to state 107
    EQUALS          shift and go to state 108
    PUSH            shift and go to state 109
    POP             shift and go to state 110


state 168

    (73) NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .

    SEMI            reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    PERIOD          reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    LBRACKET        reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    PLUS            reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    MINUS           reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    TIMES           reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    DIVIDE          reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    MODULO          reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    LOR             reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    LAND            reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    LT              reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    LE              reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    GT              reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    GE              reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    EQ              reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    NE              reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    EQUALS          reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    PUSH            reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    POP             reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    RPAREN          reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    RBRACKET        reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    COMMA           reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)
    RBRACE          reduce using rule 73 (NewExpression -> NEW Type LPAREN ArgumentsOpt RPAREN .)


state 169

    (74) NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .

    SEMI            reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    PERIOD          reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    LBRACKET        reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    PLUS            reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    MINUS           reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    TIMES           reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    DIVIDE          reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    MODULO          reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    LOR             reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    LAND            reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    LT              reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    LE              reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    GT              reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    GE              reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    EQ              reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    NE              reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    EQUALS          reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    PUSH            reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    POP             reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    RPAREN          reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    RBRACKET        reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    COMMA           reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)
    RBRACE          reduce using rule 74 (NewExpression -> NEW Type LBRACE ArgumentsOpt RBRACE .)


state 170

    (33) IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .

    IF              reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    WHILE           reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    FOR             reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    BREAK           reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    CONTINUE        reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    RETURN          reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    LPAREN          reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    NEW             reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    PLUS            reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    MINUS           reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    LNOT            reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    INCREMENT       reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    DECREMENT       reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    ID              reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    INTEGER         reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    FLOAT           reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    STRING          reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    TRUE            reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    FALSE           reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    NULL            reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    IDENT           reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)
    RBRACE          reduce using rule 33 (IfStatement -> IF LPAREN Expression RPAREN Block ElseOpt .)


state 171

    (34) ElseOpt -> ELSE . Block
    (35) ElseOpt -> ELSE . IfStatement
    (21) Block -> . LBRACE StatementsOpt RBRACE
    (33) IfStatement -> . IF LPAREN Expression RPAREN Block ElseOpt

    LBRACE          shift and go to state 40
    IF              shift and go to state 52

    Block                          shift and go to state 174
    IfStatement                    shift and go to state 175

state 172

    (36) ElseOpt -> empty .

    IF              reduce using rule 36 (ElseOpt -> empty .)
    WHILE           reduce using rule 36 (ElseOpt -> empty .)
    FOR             reduce using rule 36 (ElseOpt -> empty .)
    BREAK           reduce using rule 36 (ElseOpt -> empty .)
    CONTINUE        reduce using rule 36 (ElseOpt -> empty .)
    RETURN          reduce using rule 36 (ElseOpt -> empty .)
    LPAREN          reduce using rule 36 (ElseOpt -> empty .)
    NEW             reduce using rule 36 (ElseOpt -> empty .)
    PLUS            reduce using rule 36 (ElseOpt -> empty .)
    MINUS           reduce using rule 36 (ElseOpt -> empty .)
    LNOT            reduce using rule 36 (ElseOpt -> empty .)
    INCREMENT       reduce using rule 36 (ElseOpt -> empty .)
    DECREMENT       reduce using rule 36 (ElseOpt -> empty .)
    ID              reduce using rule 36 (ElseOpt -> empty .)
    INTEGER         reduce using rule 36 (ElseOpt -> empty .)
    FLOAT           reduce using rule 36 (ElseOpt -> empty .)
    STRING          reduce using rule 36 (ElseOpt -> empty .)
    TRUE            reduce using rule 36 (ElseOpt -> empty .)
    FALSE           reduce using rule 36 (ElseOpt -> empty .)
    NULL            reduce using rule 36 (ElseOpt -> empty .)
    IDENT           reduce using rule 36 (ElseOpt -> empty .)
    RBRACE          reduce using rule 36 (ElseOpt -> empty .)


state 173

    (38) ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI . ExpressionOpt RPAREN Block
    (53) ExpressionOpt -> . Expression
    (54) ExpressionOpt -> . empty
    (44) Expression -> . Literal
    (45) Expression -> . NameExpression
    (46) Expression -> . ParenthesizedExpression
    (47) Expression -> . CallExpression
    (48) Expression -> . NewExpression
    (49) Expression -> . FieldAccessExpression
    (50) Expression -> . ArrayIndexExpression
    (51) Expression -> . UnaryPrefixOperation
    (52) Expression -> . BinaryOperation
    (99) empty -> .
    (55) Literal -> . IntegerLiteral
    (56) Literal -> . FloatLiteral
    (57) Literal -> . StringLiteral
    (58) Literal -> . BooleanLiteral
    (59) Literal -> . NullLiteral
    (66) NameExpression -> . Name
    (67) ParenthesizedExpression -> . LPAREN Expression RPAREN
    (68) CallExpression -> . Name LPAREN ArgumentsOpt RPAREN
    (73) NewExpression -> . NEW Type LPAREN ArgumentsOpt RPAREN
    (74) NewExpression -> . NEW Type LBRACE ArgumentsOpt RBRACE
    (75) FieldAccessExpression -> . Expression PERIOD Name
    (76) ArrayIndexExpression -> . Expression LBRACKET Expression RBRACKET
    (77) UnaryPrefixOperation -> . PLUS Expression
    (78) UnaryPrefixOperation -> . MINUS Expression
    (79) UnaryPrefixOperation -> . LNOT Expression
    (80) UnaryPrefixOperation -> . INCREMENT Expression
    (81) UnaryPrefixOperation -> . DECREMENT Expression
    (82) UnaryPrefixOperation -> . ID Expression
    (83) BinaryOperation -> . Expression PLUS Expression
    (84) BinaryOperation -> . Expression MINUS Expression
    (85) BinaryOperation -> . Expression TIMES Expression
    (86) BinaryOperation -> . Expression DIVIDE Expression
    (87) BinaryOperation -> . Expression MODULO Expression
    (88) BinaryOperation -> . Expression LOR Expression
    (89) BinaryOperation -> . Expression LAND Expression
    (90) BinaryOperation -> . Expression LT Expression
    (91) BinaryOperation -> . Expression LE Expression
    (92) BinaryOperation -> . Expression GT Expression
    (93) BinaryOperation -> . Expression GE Expression
    (94) BinaryOperation -> . Expression EQ Expression
    (95) BinaryOperation -> . Expression NE Expression
    (96) BinaryOperation -> . Expression EQUALS Expression
    (97) BinaryOperation -> . Expression PUSH Expression
    (98) BinaryOperation -> . Expression POP Expression
    (60) IntegerLiteral -> . INTEGER
    (61) FloatLiteral -> . FLOAT
    (62) StringLiteral -> . STRING
    (63) BooleanLiteral -> . TRUE
    (64) BooleanLiteral -> . FALSE
    (65) NullLiteral -> . NULL
    (14) Name -> . IDENT

    RPAREN          reduce using rule 99 (empty -> .)
    LPAREN          shift and go to state 53
    NEW             shift and go to state 75
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    LNOT            shift and go to state 78
    INCREMENT       shift and go to state 79
    DECREMENT       shift and go to state 80
    ID              shift and go to state 81
    INTEGER         shift and go to state 82
    FLOAT           shift and go to state 83
    STRING          shift and go to state 84
    TRUE            shift and go to state 85
    FALSE           shift and go to state 86
    NULL            shift and go to state 87
    IDENT           shift and go to state 10

    ExpressionOpt                  shift and go to state 176
    Expression                     shift and go to state 147
    empty                          shift and go to state 148
    Literal                        shift and go to state 60
    NameExpression                 shift and go to state 61
    ParenthesizedExpression        shift and go to state 62
    CallExpression                 shift and go to state 63
    NewExpression                  shift and go to state 64
    FieldAccessExpression          shift and go to state 65
    ArrayIndexExpression           shift and go to state 66
    UnaryPrefixOperation           shift and go to state 67
    BinaryOperation                shift and go to state 68
    IntegerLiteral                 shift and go to state 69
    FloatLiteral                   shift and go to state 70
    StringLiteral                  shift and go to state 71
    BooleanLiteral                 shift and go to state 72
    NullLiteral                    shift and go to state 73
    Name                           shift and go to state 74

state 174

    (34) ElseOpt -> ELSE Block .

    IF              reduce using rule 34 (ElseOpt -> ELSE Block .)
    WHILE           reduce using rule 34 (ElseOpt -> ELSE Block .)
    FOR             reduce using rule 34 (ElseOpt -> ELSE Block .)
    BREAK           reduce using rule 34 (ElseOpt -> ELSE Block .)
    CONTINUE        reduce using rule 34 (ElseOpt -> ELSE Block .)
    RETURN          reduce using rule 34 (ElseOpt -> ELSE Block .)
    LPAREN          reduce using rule 34 (ElseOpt -> ELSE Block .)
    NEW             reduce using rule 34 (ElseOpt -> ELSE Block .)
    PLUS            reduce using rule 34 (ElseOpt -> ELSE Block .)
    MINUS           reduce using rule 34 (ElseOpt -> ELSE Block .)
    LNOT            reduce using rule 34 (ElseOpt -> ELSE Block .)
    INCREMENT       reduce using rule 34 (ElseOpt -> ELSE Block .)
    DECREMENT       reduce using rule 34 (ElseOpt -> ELSE Block .)
    ID              reduce using rule 34 (ElseOpt -> ELSE Block .)
    INTEGER         reduce using rule 34 (ElseOpt -> ELSE Block .)
    FLOAT           reduce using rule 34 (ElseOpt -> ELSE Block .)
    STRING          reduce using rule 34 (ElseOpt -> ELSE Block .)
    TRUE            reduce using rule 34 (ElseOpt -> ELSE Block .)
    FALSE           reduce using rule 34 (ElseOpt -> ELSE Block .)
    NULL            reduce using rule 34 (ElseOpt -> ELSE Block .)
    IDENT           reduce using rule 34 (ElseOpt -> ELSE Block .)
    RBRACE          reduce using rule 34 (ElseOpt -> ELSE Block .)


state 175

    (35) ElseOpt -> ELSE IfStatement .

    IF              reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    WHILE           reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    FOR             reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    BREAK           reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    CONTINUE        reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    RETURN          reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    LPAREN          reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    NEW             reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    PLUS            reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    MINUS           reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    LNOT            reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    INCREMENT       reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    DECREMENT       reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    ID              reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    INTEGER         reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    FLOAT           reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    STRING          reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    TRUE            reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    FALSE           reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    NULL            reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    IDENT           reduce using rule 35 (ElseOpt -> ELSE IfStatement .)
    RBRACE          reduce using rule 35 (ElseOpt -> ELSE IfStatement .)


state 176

    (38) ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt . RPAREN Block

    RPAREN          shift and go to state 177


state 177

    (38) ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN . Block
    (21) Block -> . LBRACE StatementsOpt RBRACE

    LBRACE          shift and go to state 40

    Block                          shift and go to state 178

state 178

    (38) ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .

    IF              reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    WHILE           reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    FOR             reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    BREAK           reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    CONTINUE        reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    RETURN          reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    LPAREN          reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    NEW             reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    PLUS            reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    MINUS           reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    LNOT            reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    INCREMENT       reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    DECREMENT       reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    ID              reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    INTEGER         reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    FLOAT           reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    STRING          reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    TRUE            reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    FALSE           reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    NULL            reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    IDENT           reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)
    RBRACE          reduce using rule 38 (ForStatement -> FOR LPAREN ExpressionOpt SEMI ExpressionOpt SEMI ExpressionOpt RPAREN Block .)

